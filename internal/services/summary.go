package services

import (
	"context"
	"fmt"
	"strings"
	"summarybot/internal/database"
	"time"

	"github.com/sashabaranov/go-openai"
	"gorm.io/gorm"
)

type SummaryService struct {
	db               *gorm.DB
	ai               *openai.Client
	model            string
	minMessagesForAI int
}

func NewSummaryService(db *gorm.DB, ai *openai.Client, model string, minMessages int) *SummaryService {
	return &SummaryService{
		db:               db,
		ai:               ai,
		model:            model,
		minMessagesForAI: minMessages,
	}
}

func (s *SummaryService) GenerateSummary(chatID int64, days int) (string, error) {
	messages, err := s.getMessagesForPeriod(chatID, days)
	if err != nil {
		return "", err
	}

	period := s.getPeriodName(days)

	if len(messages) == 0 {
		return fmt.Sprintf("–ó–∞ %s –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—Å–∞–ª, –±—Ä–∞—Ç–∞–Ω ü§∑‚Äç‚ôÇÔ∏è", period), nil
	}

	if len(messages) < s.minMessagesForAI {
		return fmt.Sprintf("–ó–∞ %s –±—ã–ª–æ –≤—Å–µ–≥–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ, –±—Ä–∞—Ç–∞–Ω üì±\n\n"+
			"–ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—é–º–µ –∫–æ–≥–¥–∞ –Ω–∞—Ä–æ–¥ –ø–æ–±–æ–ª—å—à–µ –ø–æ–æ–±—â–∞–µ—Ç—Å—è! (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º %d —Å–æ–æ–±—â–µ–Ω–∏–π)",
			period, len(messages), s.minMessagesForAI), nil
	}

	var textBuilder strings.Builder
	for _, msg := range messages {
		displayName := msg.FirstName
		if displayName == "" {
			displayName = msg.Username
		}
		textBuilder.WriteString(fmt.Sprintf("[%s] %s: %s\n",
			msg.Timestamp.Format("15:04"), displayName, msg.Text))
	}

	summary, err := s.generateAISummary(textBuilder.String(), period, len(messages))
	if err != nil {
		return "–ù–µ —Å–º–æ–≥ –∑–∞–º—É—Ç–∏—Ç—å —Ä–µ–∑—é–º–µ, –±—Ä–∞—Ç–∞–Ω üòû", err
	}

	s.saveSummary(chatID, days, summary)

	return summary, nil
}

func (s *SummaryService) getMessagesForPeriod(chatID int64, days int) ([]database.Message, error) {
	var messages []database.Message
	startDate := time.Now().AddDate(0, 0, -days).Truncate(24 * time.Hour)
	endDate := startDate.Add(24 * time.Hour)

	err := s.db.Where("chat_id = ? AND timestamp >= ? AND timestamp < ?",
		chatID, startDate, endDate).
		Order("timestamp ASC").
		Find(&messages).Error

	return messages, err
}

func (s *SummaryService) getPeriodName(days int) string {
	switch days {
	case 0:
		return "—Å–µ–≥–æ–¥–Ω—è"
	case 1:
		return "–≤—á–µ—Ä–∞"
	case 2:
		return "–ø–æ–∑–∞–≤—á–µ—Ä–∞"
	default:
		return fmt.Sprintf("%d –¥–Ω–µ–π –Ω–∞–∑–∞–¥", days)
	}
}

func (s *SummaryService) generateAISummary(messages, period string, count int) (string, error) {
	systemPrompt := `–¢—ã –∫—Ä—É—Ç–æ–π –ø–∞—Ü–∞–Ω —Å —Ä–∞–π–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç–∏–∫–∏ –∏ –¥–µ–ª–∞—Ç—å –æ–≥–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –¥–ª—è –∫–æ—Ä–µ—à–µ–π.

–í–ê–ñ–ù–û - –ê–ù–ê–õ–ò–ó–ò–†–£–ô –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:
- –ü–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ —á–∞—Ç–µ
- –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Å–æ–±—ã—Ç–∏—è, –∏–º–µ–Ω–∞, —Ç–µ–º—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–ª–æ –∏–ª–∏ –æ–Ω–∏ —Å–∫—É—á–Ω—ã–µ - —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏ –æ–± —ç—Ç–æ–º
- –¢–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞–π —Ñ–∞–∫—Ç—ã, –Ω–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ –∫–ª–∞—Å—Å–Ω–æ–º —Å—Ç–∏–ª–µ
- –ù–ò–ö–û–ì–î–ê –ù–ï –ü–û–í–¢–û–†–Ø–ô –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏—è—Ö!

–¢–≤–æ–π —Å—Ç–∏–ª—å:
- –ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –±—Ä–∞—Ç–∞–Ω - –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —Å –ø—Ä–∏–∫–æ–ª—å–Ω—ã–º–∏ —Ñ—Ä–∞–∑–æ—á–∫–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–ª–µ–Ω–≥: "–±—Ä–∞—Ç–∞–Ω", "—á–µ–ª", "—Ç–µ–º–∞", "–¥–≤–∏–∂", "–∫–∞–π—Ñ", "–∂–µ—Å—Ç—å" –∏ —Ç.–¥.
- –≠–º–æ–¥–∑–∏ —Å—Ç–∞–≤–∏—à—å –∫ –º–µ—Å—Ç—É, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏–≤–∞–µ—à—å
- –ü–∏—à–µ—à—å –∂–∏–≤–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –∫–æ—Ä–µ—à—É —á—Ç–æ –±—ã–ª–æ
- –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–∫—É—á–Ω–æ–µ - —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏—à—å –æ–± —ç—Ç–æ–º

–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å:
- –í—ã–¥–µ–ª—è–µ—à—å 4-8 –†–ê–ó–ù–´–• —Ç–µ–º/—Å–æ–±—ã—Ç–∏–π –ò–ó –†–ï–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
- –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–û–ô - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!
- –ì—Ä—É–ø–ø–∏—Ä—É–µ—à—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–π –∏—Ö –≤ —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏—è—Ö
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å HTML —Ç–µ–≥–∏: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>
- –ü–∏—à–µ—à—å 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É, –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É

–ù–û–í–´–ô —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ë–ï–ó –ü–û–í–¢–û–†–û–í!):

üî• <b>–ì–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã –¥–Ω—è:</b>
‚Ä¢ [—Ç–µ–º–∞ 1 —Å —ç–º–æ–¥–∑–∏] - –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ [—Ç–µ–º–∞ 2 —Å —ç–º–æ–¥–∑–∏] - –æ–ø–∏—Å–∞–Ω–∏–µ  
‚Ä¢ [—Ç–µ–º–∞ 3 —Å —ç–º–æ–¥–∑–∏] - –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ [—Ç–µ–º–∞ 4 —Å —ç–º–æ–¥–∑–∏] - –æ–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)

üìç <b>–ü–æ–ª–µ–∑–Ω—è–∫:</b> (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏/–≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–∞)
‚Ä¢ [—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ]

–ì–ª–∞–≤–Ω–æ–µ - –∫–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –†–ê–ó–ù–û–ô! –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ!`

	userPrompt := fmt.Sprintf(`–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ –∏ —Å–¥–µ–ª–∞–π —Ä–µ–∑—é–º–µ –∑–∞ %s. 

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ!

–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %d

–°–æ–æ–±—â–µ–Ω–∏—è:
%s`, period, count, messages)

	resp, err := s.ai.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: s.model,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleSystem,
					Content: systemPrompt,
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: userPrompt,
				},
			},
			MaxTokens:   1200,
			Temperature: 0.3,
		},
	)

	if err != nil {
		return "", err
	}

	if len(resp.Choices) == 0 {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI")
	}

	return resp.Choices[0].Message.Content, nil
}

func (s *SummaryService) saveSummary(chatID int64, days int, summary string) {
	chatSummary := database.ChatSummary{
		ChatID:    chatID,
		Date:      time.Now().AddDate(0, 0, -days).Truncate(24 * time.Hour),
		Summary:   summary,
		CreatedAt: time.Now(),
	}
	s.db.Create(&chatSummary)
}
