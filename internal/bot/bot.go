package bot

import (
	"fmt"
	"log"
	"math/rand"
	"strings"
	"summarybot/internal/config"
	"summarybot/internal/database"
	"summarybot/internal/services"
	"summarybot/internal/utils"
	"time"

	"gopkg.in/telebot.v3"
	"gorm.io/gorm"
)

type Bot struct {
	config      *config.Config
	db          *gorm.DB
	telebot     *telebot.Bot
	dialogSvc   *services.DialogService
	summarySvc  *services.SummaryService
	statsSvc    *services.StatsService
	aiSvc       *services.AIService
	greetingGen *utils.GreetingGenerator
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func New(
	cfg *config.Config,
	db *gorm.DB,
	tgBot *telebot.Bot,
	dialogSvc *services.DialogService,
	summarySvc *services.SummaryService,
	statsSvc *services.StatsService,
	aiSvc *services.AIService,
) *Bot {
	return &Bot{
		config:      cfg,
		db:          db,
		telebot:     tgBot,
		dialogSvc:   dialogSvc,
		summarySvc:  summarySvc,
		statsSvc:    statsSvc,
		aiSvc:       aiSvc,
		greetingGen: utils.NewGreetingGenerator(),
	}
}

// SaveMessage —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
func (b *Bot) SaveMessage(m *telebot.Message) {
	if m.Text == "" {
		return
	}

	if !b.IsChatAllowed(m.Chat.ID) {
		return
	}

	message := database.Message{
		ChatID:    m.Chat.ID,
		UserID:    m.Sender.ID,
		Username:  m.Sender.Username,
		FirstName: m.Sender.FirstName,
		Text:      m.Text,
		Timestamp: time.Unix(m.Unixtime, 0),
		CreatedAt: time.Now(),
	}

	if err := b.db.Create(&message).Error; err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	} else {
		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: —á–∞—Ç %d, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (ID: %d)",
			m.Chat.ID, utils.GetUserDisplayName(m.Sender), m.Sender.ID)
	}

	b.checkAndSaveSwearStats(m)
}

// checkAndSaveSwearStats –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (b *Bot) checkAndSaveSwearStats(m *telebot.Message) {
	if m.Chat.ID > 0 {
		return
	}

	swearWords := []string{
		"–±–ª—è—Ç—å", "—Ö—É–π", "–ø–∏–∑–¥–∞", "–µ–±–∞—Ç—å", "—Å—É–∫–∞", "–≥–æ–≤–Ω–æ", "–¥–µ—Ä—å–º–æ",
		"–º—É–¥–∞–∫", "–¥–æ–ª–±–æ–µ–±", "—É–±–ª—é–¥–æ–∫", "—Å–≤–æ–ª–æ—á—å", "–ø–∞–¥–ª–∞", "–≥–∞–≤–Ω–æ",
		"—Ö—Ä–µ–Ω", "—Ö–µ—Ä–Ω—è", "–æ—Ö—É–µ—Ç—å", "–∑–∞–µ–±–∞—Ç—å", "–ø—Ä–æ–µ–±–∞—Ç—å", "–Ω–∞–µ–±–∞—Ç—å",
		"–ø–∏–∑–¥–µ—Ü", "–µ–±–∞–Ω—ã–π", "—Ö—É–µ–≤—ã–π", "–ø–∏–∑–¥–∞—Ç—ã–π", "–µ–±—É—á–∏–π", "—Å—Ä–∞–Ω—ã–π",
		"–±–ª—è", "–µ–±–ª–æ", "—Ö—É–∏–ª–æ", "–ø–∏–¥–æ—Ä", "–ø–∏–¥–∞—Ä–∞—Å", "–≥–∞–Ω–¥–æ–Ω",
	}

	text := strings.ToLower(m.Text)
	for _, swear := range swearWords {
		if strings.Contains(text, swear) {
			var stat database.SwearStats
			result := b.db.Where("chat_id = ? AND user_id = ? AND swear_word = ?",
				m.Chat.ID, m.Sender.ID, swear).First(&stat)

			if result.Error == nil {
				b.db.Model(&stat).Updates(database.SwearStats{
					Count:     stat.Count + 1,
					FirstName: m.Sender.FirstName,
					UpdatedAt: time.Now(),
				})
			} else {
				newStat := database.SwearStats{
					ChatID:    m.Chat.ID,
					UserID:    m.Sender.ID,
					Username:  m.Sender.Username,
					FirstName: m.Sender.FirstName,
					SwearWord: swear,
					Count:     1,
					UpdatedAt: time.Now(),
				}
				b.db.Create(&newStat)
			}
		}
	}
}

// IsChatAllowed –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —á–∞—Ç
func (b *Bot) IsChatAllowed(chatID int64) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥–µ
	for _, allowedID := range b.config.AllowedChats {
		if allowedID == chatID {
			return true
		}
	}

	var count int64
	b.db.Model(&database.AllowedChat{}).Where("chat_id = ?", chatID).Count(&count)
	return count > 0
}

// IsAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
func (b *Bot) IsAdmin(userID int64) bool {
	for _, adminID := range b.config.AdminUserIDs {
		if adminID == userID {
			return true
		}
	}
	return false
}

// RequestChatApproval —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —á–∞—Ç–∞
func (b *Bot) RequestChatApproval(chatID int64, chatTitle string, userID int64, username, firstName string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å–∞
	var existingRequest database.ChatApprovalRequest
	if b.db.Where("chat_id = ? AND status = 'pending'", chatID).First(&existingRequest).Error == nil {
		return
	}

	request := database.ChatApprovalRequest{
		ChatID:    chatID,
		ChatTitle: chatTitle,
		UserID:    userID,
		Username:  username,
		FirstName: firstName,
		Status:    "pending",
		CreatedAt: time.Now(),
	}

	b.db.Create(&request)
	b.notifyAdminsAboutNewRequest(request)
}

// notifyAdminsAboutNewRequest —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
func (b *Bot) notifyAdminsAboutNewRequest(request database.ChatApprovalRequest) {
	if len(b.config.AdminUserIDs) == 0 {
		return
	}

	displayName := request.FirstName
	if displayName == "" {
		displayName = request.Username
	}

	message := fmt.Sprintf("üîí <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞</b>\n\n"+
		"<b>–ß–∞—Ç:</b> %s (%d)\n"+
		"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> %s (%d)\n\n"+
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
		"‚Ä¢ <code>/approve %d</code> - —Ä–∞–∑—Ä–µ—à–∏—Ç—å\n"+
		"‚Ä¢ <code>/reject %d</code> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å\n"+
		"‚Ä¢ <code>/pending</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã",
		utils.EscapeHTML(request.ChatTitle), request.ChatID,
		utils.EscapeHTML(displayName), request.UserID,
		request.ChatID, request.ChatID)

	for _, adminID := range b.config.AdminUserIDs {
		chat := &telebot.Chat{ID: adminID}
		b.telebot.Send(chat, message, &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}
}

// MaybeDoRandomAction —Å–ª—É—á–∞–π–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ
func (b *Bot) MaybeDoRandomAction(c telebot.Context) {
	if c.Chat().ID > 0 || !b.IsChatAllowed(c.Chat().ID) {
		return
	}

	// 1% —à–∞–Ω—Å
	if rand.Intn(100) != 0 {
		return
	}

	sevenDaysAgo := time.Now().AddDate(0, 0, -7)
	var userCount int64
	b.db.Raw(`
		SELECT COUNT(DISTINCT user_id) 
		FROM messages 
		WHERE chat_id = ? AND timestamp >= ?
	`, c.Chat().ID, sevenDaysAgo).Scan(&userCount)

	if userCount < 3 {
		return
	}
	actionType := rand.Intn(2)

	user, err := b.statsSvc.GetRandomActiveUser(c.Chat().ID)
	if err != nil {
		return
	}

	mention := utils.CreateUserMention(user)

	if actionType == 0 {
		roast, err := b.aiSvc.GenerateRoast(utils.GetUserDisplayName(user))
		if err != nil {
			return
		}

		message := fmt.Sprintf("%s %s", mention, roast)
		c.Bot().Send(c.Chat(), message, &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})

		log.Printf("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∫–æ–ª –¥–ª—è %s –≤ —á–∞—Ç–µ %d",
			utils.GetUserDisplayName(user), c.Chat().ID)
	} else {
		reminder, err := b.aiSvc.GenerateReminder(utils.GetUserDisplayName(user))
		if err != nil {
			return
		}

		message := fmt.Sprintf("üîî <b>–°—Ä–æ—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n\n%s %s",
			mention, reminder)
		c.Bot().Send(c.Chat(), message, &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})

		log.Printf("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è %s –≤ —á–∞—Ç–µ %d",
			utils.GetUserDisplayName(user), c.Chat().ID)
	}
}

// HandleHelp –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
func (b *Bot) HandleHelp(c telebot.Context) error {
	// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
	if c.Chat().ID > 0 {
		if b.IsAdmin(c.Sender().ID) {
			return c.Reply(getAdminHelpText(), &telebot.SendOptions{
				ParseMode: telebot.ModeHTML,
			})
		}
		return c.Reply(getPrivateHelpText(), &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	// –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
	if !b.IsChatAllowed(c.Chat().ID) {
		return c.Reply("‚åõ –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.\n\n" +
			"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
	}

	return c.Reply(getGroupHelpText(), &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

// HandleReminderRandom –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reminder_random
func (b *Bot) HandleReminderRandom(c telebot.Context) error {
	if c.Chat().ID > 0 || !b.IsChatAllowed(c.Chat().ID) {
		return c.Reply("‚åõ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
	}

	user, err := b.statsSvc.GetRandomActiveUser(c.Chat().ID)
	if err != nil {
		return c.Reply("üòî –ù–µ–∫–æ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å - –≤ —á–∞—Ç–µ —Ç–∏—à–∏–Ω–∞!")
	}

	mention := utils.CreateUserMention(user)

	reminder, err := b.aiSvc.GenerateReminder(utils.GetUserDisplayName(user))
	if err != nil {
		reminder = "–ó–∞–±—ã–ª —á—Ç–æ —Ö–æ—Ç–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å ü§™"
	}

	message := fmt.Sprintf("‚è∞ <b>–í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n\n%s %s", mention, reminder)

	return c.Reply(message, &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

func (b *Bot) HandleRapNik(c telebot.Context) error {
	user := c.Sender()
	displayName := utils.GetUserDisplayName(user)
	mention := utils.CreateUserMention(user)

	if c.Chat().ID < 0 && !b.IsChatAllowed(c.Chat().ID) {
		return c.Reply("‚åõ –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.")
	}

	nickname, err := b.aiSvc.GenerateRapNickname(displayName)
	if err != nil {
		nicknames := []string{
			"MC Error 500 feat. –ì–ª—é–∫",
			"Young 404 Not Found",
			"Defitsit 1991",
			"Excel Killer XXL",
			"Borsch Gang 47",
		}
		nickname = nicknames[rand.Intn(len(nicknames))]
	}

	var message string
	if c.Chat().ID < 0 {
		message = fmt.Sprintf("üé§ <b>–í–Ω–∏–º–∞–Ω–∏–µ! –†—ç–ø-–∫—Ä–µ—â–µ–Ω–∏–µ!</b>\n\n"+
			"%s –æ—Ç–Ω—ã–Ω–µ –≤ —Ö–∏–ø-—Ö–æ–ø –∏–≥—Ä–µ –∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫:\n\n"+
			"üî• <b>%s</b> üî•\n\n"+
			"<i>–†–µ—Å–ø–µ–∫—Ç –Ω–æ–≤–æ–π –ª–µ–≥–µ–Ω–¥–µ –∞–Ω–¥–µ—Ä–≥—Ä–∞—É–Ω–¥–∞!</i> üíø",
			mention, nickname)
	} else {
		message = fmt.Sprintf("üé§ <b>–¢–≤–æ–π –Ω–æ–≤—ã–π —Ä—ç–ø-–ø—Å–µ–≤–¥–æ–Ω–∏–º:</b>\n\n"+
			"üî• <b>%s</b> üî•\n\n"+
			"<i>–¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤ –ø–æ–∫–æ—Ä—è—Ç—å —á–∞—Ä—Ç—ã!</i> üíø", nickname)
	}

	return c.Reply(message, &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
func getAdminHelpText() string {
	return `ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É (–ê–¥–º–∏–Ω)</b>

<b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /approve &lt;chat_id&gt; - –æ–¥–æ–±—Ä–∏—Ç—å —á–∞—Ç
‚Ä¢ /reject &lt;chat_id&gt; - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å  
‚Ä¢ /pending - –ø–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ /allowed - —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤

<b>–í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö:</b>
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞ - —Ä–µ–∑—é–º–µ —á–∞—Ç–∞
‚Ä¢ @zagichak_bot [–ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ] - –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
‚Ä¢ –û—Ç–≤–µ—á–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ - –≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥! üí¨
‚Ä¢ /roast_random - –ø–æ–¥–∫–æ–ª —Å–ª—É—á–∞–π–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é üî•
‚Ä¢ /reminder_random - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º—É-—Ç–æ üòÅ  
‚Ä¢ /top_mat - —Ç–æ–ø –º–∞—Ç–µ—Ä—à–∏–Ω–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ ü§¨
‚Ä¢ /rap_nik - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä—ç–ø-–ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ üé§


–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö! ü§ñ`
}

func getPrivateHelpText() string {
	return `ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

üëã –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!

–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–ø—Ä–æ–±—É–π:
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è - —Ä–µ–∑—é–º–µ —á–∞—Ç–∞
‚Ä¢ @zagichak_bot –ø—Ä–∏–≤–µ—Ç - –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å
‚Ä¢ –û—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - –≤–µ–¥–µ–º –¥–∏–∞–ª–æ–≥! üí¨
‚Ä¢ /roast_random - –ø–æ–¥–∫–æ–ª–æ—Ç—å –∫–æ–≥–æ-—Ç–æ üî•

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–¥–∞–º —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! ‚ú®`
}

func getGroupHelpText() string {
	return `ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–†–µ–∑—é–º–µ —á–∞—Ç–∞:</b>
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ –≤—á–µ—Ä–∞  
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ –ø–æ–∑–∞–≤—á–µ—Ä–∞
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ 3 –¥–Ω—è (–º–∞–∫—Å 7)

<b>–û–±—â–µ–Ω–∏–µ:</b>
‚Ä¢ @zagichak_bot [–ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ] - –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º
‚Ä¢ –û—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - –≤–µ–¥–µ–º –¥–∏–∞–ª–æ–≥! üí¨
‚Ä¢ –Ø –ø–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –∑–Ω–∞—é –≤—Å–µ—Ö –≤ —á–∞—Ç–µ! üß†

<b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:</b>
‚Ä¢ /roast_random - –∂–µ—Å—Ç–∫–∏–π –ø–æ–¥–∫–æ–ª —Å–ª—É—á–∞–π–Ω–æ–º—É –∫–æ—Ä–µ—à—É üî•
‚Ä¢ /reminder_random - "–≤–∞–∂–Ω–æ–µ" –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º—É-—Ç–æ üòÅ
‚Ä¢ /top_mat - —Ç–æ–ø –º–∞—Ç–µ—Ä—à–∏–Ω–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ ü§¨
‚Ä¢ /rap_nik - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä—ç–ø-–ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ üé§

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–µ–ª–∞—é –∫—Ä—É—Ç—ã–µ —Ä–µ–∑—é–º–µ –∏ –≤–µ–¥—É –∂–∏–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏! ü§ñ‚ú®`
}
