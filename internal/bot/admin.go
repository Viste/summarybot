package bot

import (
	"fmt"
	"regexp"
	"strconv"
	"strings"
	"summarybot/internal/database"
	"summarybot/internal/utils"
	"time"

	"gopkg.in/telebot.v3"
)

// HandleApprove –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /approve
func (b *Bot) HandleApprove(c telebot.Context) error {
	if !b.IsAdmin(c.Sender().ID) {
		return c.Reply("‚åõ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	args := strings.Fields(c.Message().Text)
	if len(args) < 2 {
		return c.Reply("üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/approve &lt;chat_id&gt;</code>", &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	chatID, err := strconv.ParseInt(args[1], 10, 64)
	if err != nil {
		return c.Reply("‚åõ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
	}

	result := b.db.Model(&database.ChatApprovalRequest{}).
		Where("chat_id = ? AND status = 'pending'", chatID).
		Update("status", "approved")

	if result.RowsAffected == 0 {
		return c.Reply("‚åõ –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
	}

	var request database.ChatApprovalRequest
	b.db.Where("chat_id = ?", chatID).First(&request)

	allowedChat := database.AllowedChat{
		ChatID:    chatID,
		ChatTitle: request.ChatTitle,
		AddedBy:   c.Sender().ID,
		CreatedAt: time.Now(),
	}

	b.db.Create(&allowedChat)

	return c.Reply(fmt.Sprintf("‚úÖ –ß–∞—Ç %d –æ–¥–æ–±—Ä–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ!", chatID))
}

// HandleReject –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reject
func (b *Bot) HandleReject(c telebot.Context) error {
	if !b.IsAdmin(c.Sender().ID) {
		return c.Reply("‚åõ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	args := strings.Fields(c.Message().Text)
	if len(args) < 2 {
		return c.Reply("üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/reject &lt;chat_id&gt;</code>", &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	chatID, err := strconv.ParseInt(args[1], 10, 64)
	if err != nil {
		return c.Reply("‚åõ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
	}

	result := b.db.Model(&database.ChatApprovalRequest{}).
		Where("chat_id = ? AND status = 'pending'", chatID).
		Update("status", "rejected")

	if result.RowsAffected == 0 {
		return c.Reply("‚åõ –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
	}

	return c.Reply(fmt.Sprintf("üö´ –ó–∞–ø—Ä–æ—Å –¥–ª—è —á–∞—Ç–∞ %d –æ—Ç–∫–ª–æ–Ω–µ–Ω.", chatID))
}

// HandlePending –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pending
func (b *Bot) HandlePending(c telebot.Context) error {
	if !b.IsAdmin(c.Sender().ID) {
		return c.Reply("‚åõ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	var requests []database.ChatApprovalRequest
	b.db.Where("status = 'pending'").Order("created_at DESC").Find(&requests)

	if len(requests) == 0 {
		return c.Reply("üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
	}

	var response strings.Builder
	response.WriteString("üìã <b>–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n")

	for _, req := range requests {
		displayName := req.FirstName
		if displayName == "" {
			displayName = req.Username
		}

		response.WriteString(fmt.Sprintf("üìç <b>%s</b> (%d)\n",
			utils.EscapeHTML(req.ChatTitle), req.ChatID))
		response.WriteString(fmt.Sprintf("   üë§ %s (%d)\n",
			utils.EscapeHTML(displayName), req.UserID))
		response.WriteString(fmt.Sprintf("   üìÖ %s\n",
			req.CreatedAt.Format("02.01.2006 15:04")))
		response.WriteString(fmt.Sprintf("   ‚Ä¢ <code>/approve %d</code> <code>/reject %d</code>\n\n",
			req.ChatID, req.ChatID))
	}

	return c.Reply(response.String(), &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

// HandleAllowed –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /allowed
func (b *Bot) HandleAllowed(c telebot.Context) error {
	if !b.IsAdmin(c.Sender().ID) {
		return c.Reply("‚åõ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	var chats []database.AllowedChat
	b.db.Order("created_at DESC").Find(&chats)

	var response strings.Builder
	response.WriteString("üìã <b>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:</b>\n\n")

	for _, chatID := range b.config.AllowedChats {
		response.WriteString(fmt.Sprintf("üìç %d <i>(–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)</i>\n", chatID))
	}

	for _, chat := range chats {
		response.WriteString(fmt.Sprintf("üìç <b>%s</b> (%d)\n",
			utils.EscapeHTML(chat.ChatTitle), chat.ChatID))
		response.WriteString(fmt.Sprintf("   üìÖ %s\n\n",
			chat.CreatedAt.Format("02.01.2006 15:04")))
	}

	if len(chats) == 0 && len(b.config.AllowedChats) == 0 {
		response.WriteString("üì≠ –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
	}

	return c.Reply(response.String(), &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

// HandleSummaryRequest –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∑—é–º–µ
func (b *Bot) HandleSummaryRequest(c telebot.Context) error {
	message := c.Message()

	if c.Chat().ID > 0 {
		return c.Reply("‚åõ Summary –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö, –±—Ä–∞—Ç–∞–Ω! ü§ñ")
	}

	if !b.IsChatAllowed(c.Chat().ID) {
		return b.handleUnauthorizedChat(c)
	}

	text := strings.ToLower(message.Text)
	var days int
	var period string

	if strings.Contains(text, "—Å–µ–≥–æ–¥–Ω—è") {
		days = 0
		period = "—Å–µ–≥–æ–¥–Ω—è"
	} else if strings.Contains(text, "–≤—á–µ—Ä–∞") {
		days = 1
		period = "–≤—á–µ—Ä–∞"
	} else if strings.Contains(text, "–ø–æ–∑–∞–≤—á–µ—Ä–∞") {
		days = 2
		period = "–ø–æ–∑–∞–≤—á–µ—Ä–∞"
	} else {
		re := regexp.MustCompile(`(\d+)\s*–¥–Ω`)
		matches := re.FindStringSubmatch(text)
		if len(matches) > 1 {
			if d, err := strconv.Atoi(matches[1]); err == nil && d <= 7 {
				days = d
				period = fmt.Sprintf("%d –¥–Ω–µ–π –Ω–∞–∑–∞–¥", d)
			} else {
				return c.Reply("–ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—é–º–µ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π üìÖ")
			}
		} else {
			return c.Reply("–ù–∞–ø–∏—à–∏ '@zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞/–ø–æ–∑–∞–≤—á–µ—Ä–∞' –∏–ª–∏ '@zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ N –¥–Ω–µ–π' (–º–∞–∫—Å 7)")
		}
	}

	statusMsg, _ := c.Bot().Send(c.Chat(), "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∑—é–º–µ... ‚è≥")

	summary, err := b.summarySvc.GenerateSummary(c.Chat().ID, days)
	if err != nil {
		c.Bot().Delete(statusMsg)
		return c.Reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ üòû")
	}

	c.Bot().Delete(statusMsg)

	var count int64
	startDate := time.Now().AddDate(0, 0, -days).Truncate(24 * time.Hour)
	endDate := startDate.Add(24 * time.Hour)
	b.db.Model(&database.Message{}).
		Where("chat_id = ? AND timestamp >= ? AND timestamp < ?",
			c.Chat().ID, startDate, endDate).
		Count(&count)

	summaryText := fmt.Sprintf("üìã <b>–†–µ–∑—é–º–µ –∑–∞ %s</b>\n\n%s\n\n<i>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %d</i>",
		period, summary, count)

	return c.Reply(summaryText, &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}
