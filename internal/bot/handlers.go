package bot

import (
	"fmt"
	"log"
	"strings"
	"summarybot/internal/database"
	"summarybot/internal/utils"
	"time"

	"gopkg.in/telebot.v3"
)

// HandleStart –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
func (b *Bot) HandleStart(c telebot.Context) error {
	if c.Chat().ID > 0 {
		if b.IsAdmin(c.Sender().ID) {
			return c.Reply(getAdminWelcomeText(), &telebot.SendOptions{
				ParseMode: telebot.ModeHTML,
			})
		}
		return c.Reply(getPrivateWelcomeText(), &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	if !b.IsChatAllowed(c.Chat().ID) {
		return b.handleUnauthorizedChat(c)
	}

	return c.Reply(getGroupWelcomeText(), &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

// HandleUserJoined –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *Bot) HandleUserJoined(c telebot.Context) error {
	if c.Chat().ID > 0 || !b.IsChatAllowed(c.Chat().ID) {
		return nil
	}

	for _, user := range c.Message().UsersJoined {
		if user.IsBot {
			continue
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º FirstName –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
		displayName := utils.GetUserDisplayName(&user)
		mention := utils.CreateUserMention(&user)

		// –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
		greeting := b.greetingGen.GetUniqueGreeting(utils.EscapeHTML(displayName))

		// –ó–∞–º–µ–Ω—è–µ–º –∏–º—è –Ω–∞ mention —Å–æ —Å—Å—ã–ª–∫–æ–π
		greeting = strings.Replace(greeting, utils.EscapeHTML(displayName), mention, 1)

		c.Reply(greeting, &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})

		log.Printf("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s (ID: %d)", displayName, user.ID)
	}

	return nil
}

// HandleMentions –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞
func (b *Bot) HandleMentions(c telebot.Context) error {
	message := c.Message()

	log.Printf("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç %s: %s",
		utils.GetUserDisplayName(message.Sender), message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—é–º–µ?
	if utils.IsSummaryRequest(message.Text) {
		return b.HandleSummaryRequest(c)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
	threadID := utils.GenerateThreadID(c.Chat().ID, message.Sender.ID, time.Now().Unix())

	isProvocation := utils.IsProvocativeMessage(message.Text)

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	displayName := utils.GetUserDisplayName(message.Sender)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	response, err := b.dialogSvc.GenerateResponse(
		message.Text,
		displayName,
		b.dialogSvc.DetermineGender(message.Sender.FirstName),
		[]database.DialogContext{},
		isProvocation,
	)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v", err)
		response = "–ë—Ä–∞—Ç–∞–Ω, –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª! –ü–æ–≤—Ç–æ—Ä–∏ –µ—â–µ —Ä–∞–∑ üëÇ"
	}

	sentMessage, err := c.Bot().Send(c.Chat(), response, &telebot.SendOptions{
		ReplyTo: message,
	})

	if err != nil {
		return err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
	ctx := &database.DialogContext{
		ThreadID:      threadID,
		ChatID:        c.Chat().ID,
		UserID:        message.Sender.ID,
		UserFirstName: message.Sender.FirstName,
		UserGender:    b.dialogSvc.DetermineGender(message.Sender.FirstName),
	}

	b.dialogSvc.SaveDialogMessage(
		ctx,
		message.Text,
		response,
		sentMessage.ID,
		message.ID,
		true, // –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	)

	return nil
}

// HandleBotReply –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
func (b *Bot) HandleBotReply(c telebot.Context) error {
	message := c.Message()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if message.ReplyTo == nil || message.ReplyTo.Sender.Username != b.config.BotUsername {
		return nil
	}

	// –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
	var dialogCtx database.DialogContext
	err := b.db.Where("chat_id = ? AND bot_message_id = ?",
		c.Chat().ID, message.ReplyTo.ID).
		Order("created_at DESC").
		First(&dialogCtx).Error

	if err != nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
		threadID := utils.GenerateThreadID(c.Chat().ID, message.Sender.ID, time.Now().Unix())
		dialogCtx = database.DialogContext{
			ThreadID:      threadID,
			ChatID:        c.Chat().ID,
			UserID:        message.Sender.ID,
			UserFirstName: message.Sender.FirstName,
			UserGender:    b.dialogSvc.DetermineGender(message.Sender.FirstName),
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
	history, _ := b.dialogSvc.GetDialogHistory(dialogCtx.ThreadID, 10)

	displayName := utils.GetUserDisplayName(message.Sender)
	isProvocation := utils.IsProvocativeMessage(message.Text)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	response, err := b.dialogSvc.GenerateResponse(
		message.Text,
		displayName,
		dialogCtx.UserGender,
		history,
		isProvocation,
	)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v", err)
		response = "–°–µ–∫—É–Ω–¥—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... ü§î"
	}

	sentMessage, err := c.Bot().Send(c.Chat(), response, &telebot.SendOptions{
		ReplyTo: message,
	})

	if err != nil {
		return err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
	b.dialogSvc.SaveDialogMessage(
		&dialogCtx,
		message.Text,
		response,
		sentMessage.ID,
		message.ID,
		false, // –≠—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	)

	log.Printf("–û—Ç–≤–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–µ thread %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω", dialogCtx.ThreadID)

	return nil
}

// HandleRoastRandom –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /roast_random
func (b *Bot) HandleRoastRandom(c telebot.Context) error {
	if c.Chat().ID > 0 || !b.IsChatAllowed(c.Chat().ID) {
		return c.Reply("‚åõ –ü–æ–¥–∫–æ–ª—ã —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
	}

	user, err := b.statsSvc.GetRandomActiveUser(c.Chat().ID)
	if err != nil {
		return c.Reply("üòî –ù–µ–∫–æ–≥–æ –ø–æ–¥–∫–æ–ª–æ—Ç—å - –≤ —á–∞—Ç–µ —Ç–∏—à–∏–Ω–∞!")
	}

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
	mention := utils.CreateUserMention(user)

	roast, err := b.aiSvc.GenerateRoast(utils.GetUserDisplayName(user))
	if err != nil {
		roast = "–î–∞–∂–µ —è –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Ç–µ–±—è –ø–æ–¥–∫–æ–ª–æ—Ç—å, –±—Ä–∞—Ç–∞–Ω üòÇ"
	}

	message := fmt.Sprintf("%s %s", mention, roast)

	return c.Reply(message, &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

// HandleTopMat –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top_mat
func (b *Bot) HandleTopMat(c telebot.Context) error {
	if c.Chat().ID > 0 || !b.IsChatAllowed(c.Chat().ID) {
		return c.Reply("‚åõ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
	}

	stats := b.statsSvc.GetTopSwearers(c.Chat().ID, 10)

	if len(stats) == 0 {
		return c.Reply("ü§Ø –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –º–∞—Ç–µ—Ä–∏–ª—Å—è! üòá")
	}

	var response strings.Builder
	response.WriteString("ü§¨ <b>–¢–æ–ø –º–∞—Ç–µ—Ä—à–∏–Ω–Ω–∏–∫–æ–≤ —á–∞—Ç–∞:</b>\n\n")

	medals := []string{"ü•á", "ü•à", "ü•â"}
	for i, stat := range stats {
		var medal string
		if i < 3 {
			medal = medals[i]
		} else {
			medal = fmt.Sprintf("%d.", i+1)
		}

		displayName := stat.FirstName
		if displayName == "" {
			displayName = stat.Username
		}

		response.WriteString(fmt.Sprintf("%s <b>%s</b> - %d —Ä–∞–∑\n",
			medal, utils.EscapeHTML(displayName), stat.Total))
	}

	response.WriteString("\n<i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–¥–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ üìä</i>")

	return c.Reply(response.String(), &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤
func getAdminWelcomeText() string {
	return `–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üëë

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /approve &lt;chat_id&gt; - –æ–¥–æ–±—Ä–∏—Ç—å —á–∞—Ç
‚Ä¢ /reject &lt;chat_id&gt; - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
‚Ä¢ /pending - –ø–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ /allowed - —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
‚Ä¢ /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å

<b>–í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã:</b>
‚Ä¢ /roast_random - –∂–µ—Å—Ç–∫–∏–π –ø–æ–¥–∫–æ–ª —Å–ª—É—á–∞–π–Ω–æ–º—É –∫–æ—Ä–µ—à—É üî•
‚Ä¢ /reminder_random - "–≤–∞–∂–Ω–æ–µ" –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º—É-—Ç–æ üòÅ
‚Ä¢ /top_mat - —Ç–æ–ø –º–∞—Ç–µ—Ä—à–∏–Ω–Ω–∏–∫–æ–≤ ü§¨

Summary –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö! ü§ñ`
}

func getPrivateWelcomeText() string {
	return `üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>

–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.
–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–ø—Ä–æ—Å–∏ —Ä–µ–∑—é–º–µ!

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üìñ`
}

func getGroupWelcomeText() string {
	return `–ü—Ä–∏–≤–µ—Ç! üëã 

–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ —á–∞—Ç–∞ –∏ –æ–±—â–µ–Ω–∏—è! 

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è - —Ä–µ–∑—é–º–µ
‚Ä¢ @zagichak_bot –ø—Ä–∏–≤–µ—Ç - –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å
‚Ä¢ –û—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - –±—É–¥–µ–º –¥–∏–∞–ª–æ–≥ –≤–µ—Å—Ç–∏! üí¨
‚Ä¢ /roast_random - –ø–æ–¥–∫–æ–ª —Å–ª—É—á–∞–π–Ω–æ–º—É –∫–æ—Ä–µ—à—É üî•
‚Ä¢ /reminder_random - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º—É-—Ç–æ üòÅ
‚Ä¢ /top_mat - —Ç–æ–ø –º–∞—Ç–µ—Ä—à–∏–Ω–Ω–∏–∫–æ–≤ ü§¨

–Ø —Ç–µ–ø–µ—Ä—å –ø–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∑–Ω–∞—é –∫—Ç–æ –µ—Å—Ç—å –∫—Ç–æ –≤ —á–∞—Ç–µ! 
–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –ø–æ–º–æ—â–∏! ü§ñ‚ú®`
}

func (b *Bot) handleUnauthorizedChat(c telebot.Context) error {
	if b.config.RequireApproval && c.Chat().ID < 0 {
		chatTitle := c.Chat().Title
		if chatTitle == "" {
			chatTitle = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
		}

		b.RequestChatApproval(c.Chat().ID, chatTitle, c.Sender().ID,
			c.Sender().Username, c.Sender().FirstName)

		return c.Reply("‚åõ –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —á–∞—Ç—É –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω.\n\n" +
			"üìç –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n" +
			"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
	}

	return c.Reply("‚åõ –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.")
}
