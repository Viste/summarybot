package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/sashabaranov/go-openai"
	"gopkg.in/telebot.v3"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

type Config struct {
	TelegramToken    string
	OpenAIAPIKey     string
	OpenAIBaseURL    string
	DatabasePath     string
	Port             string
	BotUsername      string
	AllowedChats     []int64
	AdminUserIDs     []int64
	RequireApproval  bool
	OpenAIModel      string
	MaxTokens        int
	MinMessagesForAI int
}

type Message struct {
	ID        uint  `gorm:"primaryKey"`
	ChatID    int64 `gorm:"index"`
	UserID    int64 `gorm:"index"`
	Username  string
	Text      string    `gorm:"type:text"`
	Timestamp time.Time `gorm:"index"`
	CreatedAt time.Time
}

type ChatSummary struct {
	ID        uint      `gorm:"primaryKey"`
	ChatID    int64     `gorm:"index"`
	Date      time.Time `gorm:"index"`
	Summary   string    `gorm:"type:text"`
	CreatedAt time.Time
}

type AllowedChat struct {
	ID        uint  `gorm:"primaryKey"`
	ChatID    int64 `gorm:"uniqueIndex"`
	ChatTitle string
	AddedBy   int64
	CreatedAt time.Time
}

type ChatApprovalRequest struct {
	ID        uint  `gorm:"primaryKey"`
	ChatID    int64 `gorm:"index"`
	ChatTitle string
	UserID    int64
	Username  string
	Status    string `gorm:"default:'pending'"`
	CreatedAt time.Time
}

type Bot struct {
	telebot *telebot.Bot
	db      *gorm.DB
	openai  *openai.Client
	config  *Config
}

func loadConfig() *Config {
	maxTokens := 1200
	if tokensStr := getEnv("OPENAI_MAX_TOKENS", ""); tokensStr != "" {
		if parsed, err := strconv.Atoi(tokensStr); err == nil && parsed > 0 {
			maxTokens = parsed
		}
	}

	minMessages := 20
	if minStr := getEnv("MIN_MESSAGES_FOR_AI", ""); minStr != "" {
		if parsed, err := strconv.Atoi(minStr); err == nil && parsed > 0 {
			minMessages = parsed
		}
	}

	return &Config{
		TelegramToken:    getEnv("TELEGRAM_BOT_TOKEN", ""),
		OpenAIAPIKey:     getEnv("OPENAI_API_KEY", ""),
		OpenAIBaseURL:    getEnv("OPENAI_BASE_URL", "http://31.172.78.152:9000/v1"),
		DatabasePath:     getEnv("DATABASE_PATH", "./summarybot.db"),
		Port:             getEnv("PORT", "8080"),
		BotUsername:      getEnv("BOT_USERNAME", "zagichak_bot"),
		AllowedChats:     parseInt64List(getEnv("ALLOWED_CHATS", "")),
		AdminUserIDs:     parseInt64List(getEnv("ADMIN_USER_IDS", "")),
		RequireApproval:  getEnv("REQUIRE_APPROVAL", "true") == "true",
		OpenAIModel:      getEnv("OPENAI_MODEL", "gpt-4o-mini"),
		MaxTokens:        maxTokens,
		MinMessagesForAI: minMessages,
	}
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func escapeHTML(text string) string {
	replacer := strings.NewReplacer(
		"&", "&amp;",
		"<", "&lt;",
		">", "&gt;",
	)
	return replacer.Replace(text)
}

func parseInt64List(str string) []int64 {
	if str == "" {
		return []int64{}
	}

	parts := strings.Split(str, ",")
	result := make([]int64, 0, len(parts))

	for _, part := range parts {
		part = strings.TrimSpace(part)
		if part == "" {
			continue
		}

		if id, err := strconv.ParseInt(part, 10, 64); err == nil {
			result = append(result, id)
		}
	}

	return result
}

func initDatabase(dbPath string) (*gorm.DB, error) {
	db, err := gorm.Open(sqlite.Open(dbPath), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Silent),
	})
	if err != nil {
		return nil, err
	}

	err = db.AutoMigrate(&Message{}, &ChatSummary{}, &AllowedChat{}, &ChatApprovalRequest{})
	if err != nil {
		return nil, err
	}

	return db, nil
}

func initOpenAI(config *Config) *openai.Client {
	clientConfig := openai.DefaultConfig(config.OpenAIAPIKey)
	if config.OpenAIBaseURL != "" {
		clientConfig.BaseURL = config.OpenAIBaseURL
	}
	return openai.NewClientWithConfig(clientConfig)
}

func (b *Bot) isChatAllowed(chatID int64) bool {
	if chatID > 0 {
		log.Printf("–ß–∞—Ç %d —Ä–∞–∑—Ä–µ—à–µ–Ω (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç)", chatID)
		return true
	}

	for _, allowedID := range b.config.AllowedChats {
		if allowedID == chatID {
			log.Printf("–ß–∞—Ç %d —Ä–∞–∑—Ä–µ—à–µ–Ω (–Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ)", chatID)
			return true
		}
	}

	var count int64
	result := b.db.Model(&AllowedChat{}).Where("chat_id = ?", chatID).Count(&count)
	if result.Error != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞ %d –≤ –ë–î: %v", chatID, result.Error)
		return false
	}

	allowed := count > 0
	if allowed {
		log.Printf("–ß–∞—Ç %d —Ä–∞–∑—Ä–µ—à–µ–Ω (–Ω–∞–π–¥–µ–Ω –≤ –ë–î)", chatID)
	} else {
		log.Printf("–ß–∞—Ç %d –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –Ω–∏ –≤ –ë–î)", chatID)
	}

	return allowed
}

func (b *Bot) isAdmin(userID int64) bool {
	for _, adminID := range b.config.AdminUserIDs {
		if adminID == userID {
			return true
		}
	}
	return false
}

func (b *Bot) requestChatApproval(chatID int64, chatTitle string, userID int64, username string) {
	var existingRequest ChatApprovalRequest
	result := b.db.Where("chat_id = ? AND status = 'pending'", chatID).First(&existingRequest)
	if result.Error == nil {
		return
	}

	request := ChatApprovalRequest{
		ChatID:    chatID,
		ChatTitle: chatTitle,
		UserID:    userID,
		Username:  username,
		Status:    "pending",
	}

	b.db.Create(&request)

	b.notifyAdminsAboutNewRequest(request)
}

func (b *Bot) notifyAdminsAboutNewRequest(request ChatApprovalRequest) {
	if len(b.config.AdminUserIDs) == 0 {
		return
	}

	message := fmt.Sprintf("üîê <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞</b>\n\n"+
		"<b>–ß–∞—Ç:</b> %s (%d)\n"+
		"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @%s (%d)\n\n"+
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
		"‚Ä¢ <code>/approve %d</code> - —Ä–∞–∑—Ä–µ—à–∏—Ç—å\n"+
		"‚Ä¢ <code>/reject %d</code> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å\n"+
		"‚Ä¢ <code>/pending</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã",
		escapeHTML(request.ChatTitle), request.ChatID,
		escapeHTML(request.Username), request.UserID,
		request.ChatID, request.ChatID)

	for _, adminID := range b.config.AdminUserIDs {
		chat := &telebot.Chat{ID: adminID}
		b.telebot.Send(chat, message, &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}
}

func (b *Bot) saveMessage(m *telebot.Message) {
	if m.Text == "" {
		log.Printf("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç %s –≤ —á–∞—Ç–µ %d", m.Sender.Username, m.Chat.ID)
		return
	}

	if !b.isChatAllowed(m.Chat.ID) {
		log.Printf("–ß–∞—Ç %d –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è", m.Chat.ID)
		return
	}

	message := Message{
		ChatID:    m.Chat.ID,
		UserID:    m.Sender.ID,
		Username:  m.Sender.Username,
		Text:      m.Text,
		Timestamp: time.Unix(m.Unixtime, 0),
	}

	result := b.db.Create(&message)
	if result.Error != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: %v", result.Error)
	} else {
		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: —á–∞—Ç %d, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s, ID –∑–∞–ø–∏—Å–∏: %d",
			m.Chat.ID, m.Sender.Username, message.ID)
	}
}

func (b *Bot) getMessagesForPeriod(chatID int64, days int) ([]Message, error) {
	var messages []Message
	startDate := time.Now().AddDate(0, 0, -days).Truncate(24 * time.Hour)
	endDate := startDate.Add(24 * time.Hour)

	err := b.db.Where("chat_id = ? AND timestamp >= ? AND timestamp < ?",
		chatID, startDate, endDate).
		Order("timestamp ASC").
		Find(&messages).Error

	return messages, err
}

func (b *Bot) generateSummary(messages []Message, period string) (string, error) {
	if len(messages) == 0 {
		return fmt.Sprintf("–ó–∞ %s –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—Å–∞–ª, –±—Ä–∞—Ç–∞–Ω ü§∑‚Äç‚ôÇÔ∏è", period), nil
	}

	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–ª–æ - –Ω–µ —Ç—Ä–∞—Ç–∏–º –¥–µ–Ω—å–≥–∏ –Ω–∞ OpenAI
	if len(messages) < b.config.MinMessagesForAI {
		log.Printf("–ú–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞: %d < %d (–ø–æ—Ä–æ–≥)", len(messages), b.config.MinMessagesForAI)
		return fmt.Sprintf("–ó–∞ %s –±—ã–ª–æ –≤—Å–µ–≥–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ, –±—Ä–∞—Ç–∞–Ω üì±\n\n–ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—é–º–µ –∫–æ–≥–¥–∞ –Ω–∞—Ä–æ–¥ –ø–æ–±–æ–ª—å—à–µ –ø–æ–æ–±—â–∞–µ—Ç—Å—è! (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º %d —Å–æ–æ–±—â–µ–Ω–∏–π)",
			period, len(messages), b.config.MinMessagesForAI), nil
	}

	log.Printf("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º %d —Å–æ–æ–±—â–µ–Ω–∏–π –≤ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", len(messages))

	var textBuilder strings.Builder
	for _, msg := range messages {
		textBuilder.WriteString(fmt.Sprintf("[%s] %s: %s\n",
			msg.Timestamp.Format("15:04"), msg.Username, msg.Text))
	}

	systemPrompt := `–¢—ã –∫—Ä—É—Ç–æ–π –ø–∞—Ü–∞–Ω —Å —Ä–∞–π–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç–∏–∫–∏ –∏ –¥–µ–ª–∞—Ç—å –æ–≥–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –¥–ª—è –∫–æ—Ä–µ—à–µ–π. 

–í–ê–ñ–ù–û - –ê–ù–ê–õ–ò–ó–ò–†–£–ô –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:
- –ü–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ —á–∞—Ç–µ
- –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Å–æ–±—ã—Ç–∏—è, –∏–º–µ–Ω–∞, —Ç–µ–º—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–ª–æ –∏–ª–∏ –æ–Ω–∏ —Å–∫—É—á–Ω—ã–µ - —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏ –æ–± —ç—Ç–æ–º
- –¢–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞–π —Ñ–∞–∫—Ç—ã, –Ω–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ –∫–ª–∞—Å—Å–Ω–æ–º —Å—Ç–∏–ª–µ

–¢–≤–æ–π —Å—Ç–∏–ª—å:
- –ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –±—Ä–∞—Ç–∞–Ω - –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —Å –ø—Ä–∏–∫–æ–ª—å–Ω—ã–º–∏ —Ñ—Ä–∞–∑–æ—á–∫–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–ª–µ–Ω–≥: "–±—Ä–∞—Ç–∞–Ω", "—á–µ–ª", "—Ç–µ–º–∞", "–¥–≤–∏–∂", "–∫–∞–π—Ñ", "–∂–µ—Å—Ç—å" –∏ —Ç.–¥.
- –≠–º–æ–¥–∑–∏ —Å—Ç–∞–≤–∏—à—å –∫ –º–µ—Å—Ç—É, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏–≤–∞–µ—à—å
- –ü–∏—à–µ—à—å –∂–∏–≤–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –∫–æ—Ä–µ—à—É —á—Ç–æ –±—ã–ª–æ
- –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–∫—É—á–Ω–æ–µ - —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏—à—å –æ–± —ç—Ç–æ–º

–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å:
- –í—ã–¥–µ–ª—è–µ—à—å 3-6 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–º/—Å–æ–±—ã—Ç–∏–π –ò–ó –†–ï–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
- –ì—Ä—É–ø–ø–∏—Ä—É–µ—à—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º
- –°–æ—Ö—Ä–∞–Ω—è–µ—à—å –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: —Å—Å—ã–ª–∫–∏, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Ä–µ—à–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å HTML —Ç–µ–≥–∏: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>
- –ü–∏—à–µ—à—å 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É, –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

üî• <b>–ß—Ç–æ –±—ã–ª–æ –∂–∞—Ä–∫–æ:</b>
‚Ä¢ [—Ç–µ–º–∞ —Å —ç–º–æ–¥–∑–∏] - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¢–û–õ–¨–ö–û –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

üí¨ <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–≤–∏–∂–∏:</b>
‚Ä¢ [–¥–≤–∏–∂ 1 –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π]
‚Ä¢ [–¥–≤–∏–∂ 2 –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π]

üîó <b>–ü–æ–ª–µ–∑–Ω—è–∫:</b> (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏/—Ä–µ—à–µ–Ω–∏—è)
‚Ä¢ [—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ]

–ì–ª–∞–≤–Ω–æ–µ - –ø–∏—à–∏ –∫–∞–∫ –ø–∞—Ü–∞–Ω –¥–ª—è –ø–∞—Ü–∞–Ω–æ–≤, –Ω–æ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–∞–∫—Ç–∞–º –∏–∑ —á–∞—Ç–∞!`

	userPrompt := fmt.Sprintf(`–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ –∏ —Å–¥–µ–ª–∞–π —Ä–µ–∑—é–º–µ –∑–∞ %s. 

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ!

–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %d

–°–æ–æ–±—â–µ–Ω–∏—è:
%s`, period, len(messages), textBuilder.String())

	resp, err := b.openai.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: b.config.OpenAIModel,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleSystem,
					Content: systemPrompt,
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: userPrompt,
				},
			},
			MaxTokens:   b.config.MaxTokens,
			Temperature: 0.3,
		},
	)

	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ OpenAI API: %v", err)
	}

	if len(resp.Choices) == 0 {
		return "–ù–µ —Å–º–æ–≥ –∑–∞–º—É—Ç–∏—Ç—å —Ä–µ–∑—é–º–µ, –±—Ä–∞—Ç–∞–Ω üòû", nil
	}

	return resp.Choices[0].Message.Content, nil
}

func (b *Bot) handleSummaryRequest(c telebot.Context) error {
	message := c.Message()

	if !b.isChatAllowed(c.Chat().ID) {
		if b.config.RequireApproval && c.Chat().ID < 0 {
			chatTitle := c.Chat().Title
			if chatTitle == "" {
				chatTitle = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
			}

			b.requestChatApproval(c.Chat().ID, chatTitle, c.Sender().ID, c.Sender().Username)

			return c.Reply("‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —á–∞—Ç—É –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω.\n\n" +
				"üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n" +
				"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
		}

		return c.Reply("‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.")
	}

	text := strings.ToLower(message.Text)
	var days int
	var period string

	if strings.Contains(text, "—Å–µ–≥–æ–¥–Ω—è") {
		days = 0
		period = "—Å–µ–≥–æ–¥–Ω—è"
	} else if strings.Contains(text, "–≤—á–µ—Ä–∞") {
		days = 1
		period = "–≤—á–µ—Ä–∞"
	} else if strings.Contains(text, "–ø–æ–∑–∞–≤—á–µ—Ä–∞") {
		days = 2
		period = "–ø–æ–∑–∞–≤—á–µ—Ä–∞"
	} else {
		re := regexp.MustCompile(`(\d+)\s*–¥–Ω`)
		matches := re.FindStringSubmatch(text)
		if len(matches) > 1 {
			if d, err := strconv.Atoi(matches[1]); err == nil && d <= 7 {
				days = d
				period = fmt.Sprintf("%d –¥–Ω–µ–π –Ω–∞–∑–∞–¥", d)
			} else {
				return c.Reply("–ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—é–º–µ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π üìÖ")
			}
		} else {
			return c.Reply("–ù–∞–ø–∏—à–∏ '@zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞/–ø–æ–∑–∞–≤—á–µ—Ä–∞' –∏–ª–∏ '@zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ N –¥–Ω–µ–π' (–º–∞–∫—Å 7)")
		}
	}

	log.Printf("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—é–º–µ –¥–ª—è —á–∞—Ç–∞ %d –Ω–∞ –ø–µ—Ä–∏–æ–¥: %s (–¥–Ω–µ–π –Ω–∞–∑–∞–¥: %d)", c.Chat().ID, period, days)

	statusMsg, _ := c.Bot().Send(c.Chat(), "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∑—é–º–µ... ‚è≥")

	messages, err := b.getMessagesForPeriod(c.Chat().ID, days)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ %d: %v", c.Chat().ID, err)
		c.Bot().Delete(statusMsg)
		return c.Reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π üòû")
	}

	log.Printf("–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∑—é–º–µ: %d", len(messages))

	summary, err := b.generateSummary(messages, period)
	if err != nil {
		c.Bot().Delete(statusMsg)
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ: %v", err)
		return c.Reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ ü§ñ")
	}

	chatSummary := ChatSummary{
		ChatID:  c.Chat().ID,
		Date:    time.Now().AddDate(0, 0, -days).Truncate(24 * time.Hour),
		Summary: summary,
	}
	b.db.Create(&chatSummary)

	c.Bot().Delete(statusMsg)

	summaryText := fmt.Sprintf("üìã <b>–†–µ–∑—é–º–µ –∑–∞ %s</b>\n\n%s\n\n<i>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %d</i>",
		period, summary, len(messages))

	return c.Reply(summaryText, &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

func (b *Bot) handleStart(c telebot.Context) error {
	if c.Chat().ID < 0 && !b.isChatAllowed(c.Chat().ID) {
		if b.config.RequireApproval {
			chatTitle := c.Chat().Title
			if chatTitle == "" {
				chatTitle = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
			}

			b.requestChatApproval(c.Chat().ID, chatTitle, c.Sender().ID, c.Sender().Username)

			return c.Reply("‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —á–∞—Ç—É –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω.\n\n" +
				"üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n" +
				"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
		}

		return c.Reply("‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.")
	}

	welcomeText := `–ü—Ä–∏–≤–µ—Ç! üëã 

–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ —á–∞—Ç–∞. –ü—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏ –º–µ–Ω—è –∏ —Å–∫–∞–∂–∏:
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ –≤—á–µ—Ä–∞  
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ –ø–æ–∑–∞–≤—á–µ—Ä–∞
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ 3 –¥–Ω—è

–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–¥–∞–º —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! ü§ñ‚ú®`

	return c.Reply(welcomeText)
}

func (b *Bot) handleApprove(c telebot.Context) error {
	if !b.isAdmin(c.Sender().ID) {
		return c.Reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	args := strings.Fields(c.Message().Text)
	if len(args) < 2 {
		return c.Reply("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/approve &lt;chat_id&gt;</code>", &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	chatID, err := strconv.ParseInt(args[1], 10, 64)
	if err != nil {
		return c.Reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
	}

	result := b.db.Model(&ChatApprovalRequest{}).
		Where("chat_id = ? AND status = 'pending'", chatID).
		Update("status", "approved")

	if result.RowsAffected == 0 {
		return c.Reply("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
	}

	allowedChat := AllowedChat{
		ChatID:  chatID,
		AddedBy: c.Sender().ID,
	}

	var request ChatApprovalRequest
	if b.db.Where("chat_id = ?", chatID).First(&request).Error == nil {
		allowedChat.ChatTitle = request.ChatTitle
	}

	b.db.Create(&allowedChat)

	return c.Reply(fmt.Sprintf("‚úÖ –ß–∞—Ç %d –æ–¥–æ–±—Ä–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ!", chatID))
}

func (b *Bot) handleReject(c telebot.Context) error {
	if !b.isAdmin(c.Sender().ID) {
		return c.Reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	args := strings.Fields(c.Message().Text)
	if len(args) < 2 {
		return c.Reply("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/reject &lt;chat_id&gt;</code>", &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	chatID, err := strconv.ParseInt(args[1], 10, 64)
	if err != nil {
		return c.Reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
	}

	result := b.db.Model(&ChatApprovalRequest{}).
		Where("chat_id = ? AND status = 'pending'", chatID).
		Update("status", "rejected")

	if result.RowsAffected == 0 {
		return c.Reply("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
	}

	return c.Reply(fmt.Sprintf("üö´ –ó–∞–ø—Ä–æ—Å –¥–ª—è —á–∞—Ç–∞ %d –æ—Ç–∫–ª–æ–Ω–µ–Ω.", chatID))
}

func (b *Bot) handlePending(c telebot.Context) error {
	if !b.isAdmin(c.Sender().ID) {
		return c.Reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	var requests []ChatApprovalRequest
	b.db.Where("status = 'pending'").Order("created_at DESC").Find(&requests)

	if len(requests) == 0 {
		return c.Reply("üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
	}

	var response strings.Builder
	response.WriteString("üìã <b>–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n")

	for _, req := range requests {
		response.WriteString(fmt.Sprintf("üîπ <b>%s</b> (%d)\n", escapeHTML(req.ChatTitle), req.ChatID))
		response.WriteString(fmt.Sprintf("   üë§ @%s (%d)\n", escapeHTML(req.Username), req.UserID))
		response.WriteString(fmt.Sprintf("   üìÖ %s\n", req.CreatedAt.Format("02.01.2006 15:04")))
		response.WriteString(fmt.Sprintf("   ‚Ä¢ <code>/approve %d</code> <code>/reject %d</code>\n\n", req.ChatID, req.ChatID))
	}

	return c.Reply(response.String(), &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

func (b *Bot) handleAllowedChats(c telebot.Context) error {
	if !b.isAdmin(c.Sender().ID) {
		return c.Reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	var chats []AllowedChat
	b.db.Order("created_at DESC").Find(&chats)

	var response strings.Builder
	response.WriteString("üìã <b>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:</b>\n\n")

	for _, chatID := range b.config.AllowedChats {
		response.WriteString(fmt.Sprintf("üîπ %d <i>(–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)</i>\n", chatID))
	}

	for _, chat := range chats {
		response.WriteString(fmt.Sprintf("üîπ <b>%s</b> (%d)\n", escapeHTML(chat.ChatTitle), chat.ChatID))
		response.WriteString(fmt.Sprintf("   üìÖ %s\n\n", chat.CreatedAt.Format("02.01.2006 15:04")))
	}

	if len(chats) == 0 && len(b.config.AllowedChats) == 0 {
		response.WriteString("üì≠ –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
	}

	return c.Reply(response.String(), &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

func (b *Bot) startHealthServer() {
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(map[string]string{"status": "ok"})
	})

	log.Printf("Health server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", b.config.Port)
	if err := http.ListenAndServe(":"+b.config.Port, nil); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ health —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

func main() {
	config := loadConfig()

	db, err := initDatabase(config.DatabasePath)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %v", err)
	}

	openaiClient := initOpenAI(config)

	pref := telebot.Settings{
		Token:  config.TelegramToken,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	tgBot, err := telebot.NewBot(pref)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–∞: %v", err)
	}

	bot := &Bot{
		telebot: tgBot,
		db:      db,
		openai:  openaiClient,
		config:  config,
	}

	tgBot.Handle("/start", bot.handleStart)
	tgBot.Handle("/approve", bot.handleApprove)
	tgBot.Handle("/reject", bot.handleReject)
	tgBot.Handle("/pending", bot.handlePending)
	tgBot.Handle("/allowed", bot.handleAllowedChats)
	tgBot.Handle(telebot.OnText, func(c telebot.Context) error {
		message := c.Message()

		log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (ID: %d) –≤ —á–∞—Ç–µ %d (%s): %s",
			message.Sender.Username, message.Sender.ID,
			c.Chat().ID, c.Chat().Title, message.Text)

		bot.saveMessage(message)

		if strings.Contains(message.Text, "@"+config.BotUsername) {
			log.Printf("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: %s", message.Text)
			return bot.handleSummaryRequest(c)
		}

		return nil
	})

	go bot.startHealthServer()

	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! Username: @%s", config.BotUsername)
	tgBot.Start()
}
