package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/sashabaranov/go-openai"
	"gopkg.in/telebot.v3"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

type Config struct {
	TelegramToken    string
	OpenAIAPIKey     string
	OpenAIBaseURL    string
	DatabasePath     string
	Port             string
	BotUsername      string
	AllowedChats     []int64
	AdminUserIDs     []int64
	RequireApproval  bool
	OpenAIModel      string
	MaxTokens        int
	MinMessagesForAI int
}

type Message struct {
	ID        uint  `gorm:"primaryKey"`
	ChatID    int64 `gorm:"index"`
	UserID    int64 `gorm:"index"`
	Username  string
	Text      string    `gorm:"type:text"`
	Timestamp time.Time `gorm:"index"`
	CreatedAt time.Time
}

type ChatSummary struct {
	ID        uint      `gorm:"primaryKey"`
	ChatID    int64     `gorm:"index"`
	Date      time.Time `gorm:"index"`
	Summary   string    `gorm:"type:text"`
	CreatedAt time.Time
}

type AllowedChat struct {
	ID        uint  `gorm:"primaryKey"`
	ChatID    int64 `gorm:"uniqueIndex"`
	ChatTitle string
	AddedBy   int64
	CreatedAt time.Time
}

type ChatApprovalRequest struct {
	ID        uint  `gorm:"primaryKey"`
	ChatID    int64 `gorm:"index"`
	ChatTitle string
	UserID    int64
	Username  string
	Status    string `gorm:"default:'pending'"`
	CreatedAt time.Time
}

type SwearStats struct {
	ID        uint  `gorm:"primaryKey"`
	ChatID    int64 `gorm:"index"`
	UserID    int64 `gorm:"index"`
	Username  string
	SwearWord string
	Count     int `gorm:"default:1"`
	UpdatedAt time.Time
}

type Bot struct {
	telebot *telebot.Bot
	db      *gorm.DB
	openai  *openai.Client
	config  *Config
}

func loadConfig() *Config {
	maxTokens := 1200
	if tokensStr := getEnv("OPENAI_MAX_TOKENS", ""); tokensStr != "" {
		if parsed, err := strconv.Atoi(tokensStr); err == nil && parsed > 0 {
			maxTokens = parsed
		}
	}

	minMessages := 20
	if minStr := getEnv("MIN_MESSAGES_FOR_AI", ""); minStr != "" {
		if parsed, err := strconv.Atoi(minStr); err == nil && parsed > 0 {
			minMessages = parsed
		}
	}

	return &Config{
		TelegramToken:    getEnv("TELEGRAM_BOT_TOKEN", ""),
		OpenAIAPIKey:     getEnv("OPENAI_API_KEY", ""),
		OpenAIBaseURL:    getEnv("OPENAI_BASE_URL", "http://31.172.78.152:9000/v1"),
		DatabasePath:     getEnv("DATABASE_PATH", "./summarybot.db"),
		Port:             getEnv("PORT", "8080"),
		BotUsername:      getEnv("BOT_USERNAME", "zagichak_bot"),
		AllowedChats:     parseInt64List(getEnv("ALLOWED_CHATS", "")),
		AdminUserIDs:     parseInt64List(getEnv("ADMIN_USER_IDS", "")),
		RequireApproval:  getEnv("REQUIRE_APPROVAL", "true") == "true",
		OpenAIModel:      getEnv("OPENAI_MODEL", "gpt-4o-mini"),
		MaxTokens:        maxTokens,
		MinMessagesForAI: minMessages,
	}
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func escapeHTML(text string) string {
	replacer := strings.NewReplacer(
		"&", "&amp;",
		"<", "&lt;",
		">", "&gt;",
	)
	return replacer.Replace(text)
}

func parseInt64List(str string) []int64 {
	if str == "" {
		return []int64{}
	}

	parts := strings.Split(str, ",")
	result := make([]int64, 0, len(parts))

	for _, part := range parts {
		part = strings.TrimSpace(part)
		if part == "" {
			continue
		}

		if id, err := strconv.ParseInt(part, 10, 64); err == nil {
			result = append(result, id)
		}
	}

	return result
}

func initDatabase(dbPath string) (*gorm.DB, error) {
	db, err := gorm.Open(sqlite.Open(dbPath), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Silent),
	})
	if err != nil {
		return nil, err
	}

	err = db.AutoMigrate(&Message{}, &ChatSummary{}, &AllowedChat{}, &ChatApprovalRequest{}, &SwearStats{})
	if err != nil {
		return nil, err
	}

	return db, nil
}

func initOpenAI(config *Config) *openai.Client {
	clientConfig := openai.DefaultConfig(config.OpenAIAPIKey)
	if config.OpenAIBaseURL != "" {
		clientConfig.BaseURL = config.OpenAIBaseURL
	}
	return openai.NewClientWithConfig(clientConfig)
}

func (b *Bot) isChatAllowed(chatID int64) bool {
	for _, allowedID := range b.config.AllowedChats {
		if allowedID == chatID {
			log.Printf("–ß–∞—Ç %d —Ä–∞–∑—Ä–µ—à–µ–Ω (–Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ)", chatID)
			return true
		}
	}

	var count int64
	result := b.db.Model(&AllowedChat{}).Where("chat_id = ?", chatID).Count(&count)
	if result.Error != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞ %d –≤ –ë–î: %v", chatID, result.Error)
		return false
	}

	allowed := count > 0
	if allowed {
		log.Printf("–ß–∞—Ç %d —Ä–∞–∑—Ä–µ—à–µ–Ω (–Ω–∞–π–¥–µ–Ω –≤ –ë–î)", chatID)
	} else {
		log.Printf("–ß–∞—Ç %d –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –Ω–∏ –≤ –ë–î)", chatID)
	}

	return allowed
}

func (b *Bot) isAdmin(userID int64) bool {
	for _, adminID := range b.config.AdminUserIDs {
		if adminID == userID {
			return true
		}
	}
	return false
}

func (b *Bot) requestChatApproval(chatID int64, chatTitle string, userID int64, username string) {
	var existingRequest ChatApprovalRequest
	result := b.db.Where("chat_id = ? AND status = 'pending'", chatID).First(&existingRequest)
	if result.Error == nil {
		return
	}

	request := ChatApprovalRequest{
		ChatID:    chatID,
		ChatTitle: chatTitle,
		UserID:    userID,
		Username:  username,
		Status:    "pending",
	}

	b.db.Create(&request)

	b.notifyAdminsAboutNewRequest(request)
}

func (b *Bot) notifyAdminsAboutNewRequest(request ChatApprovalRequest) {
	if len(b.config.AdminUserIDs) == 0 {
		return
	}

	message := fmt.Sprintf("üîê <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞</b>\n\n"+
		"<b>–ß–∞—Ç:</b> %s (%d)\n"+
		"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @%s (%d)\n\n"+
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
		"‚Ä¢ <code>/approve %d</code> - —Ä–∞–∑—Ä–µ—à–∏—Ç—å\n"+
		"‚Ä¢ <code>/reject %d</code> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å\n"+
		"‚Ä¢ <code>/pending</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã",
		escapeHTML(request.ChatTitle), request.ChatID,
		escapeHTML(request.Username), request.UserID,
		request.ChatID, request.ChatID)

	for _, adminID := range b.config.AdminUserIDs {
		chat := &telebot.Chat{ID: adminID}
		b.telebot.Send(chat, message, &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}
}

func (b *Bot) saveMessage(m *telebot.Message) {
	if m.Text == "" {
		log.Printf("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç %s –≤ —á–∞—Ç–µ %d", m.Sender.Username, m.Chat.ID)
		return
	}

	if !b.isChatAllowed(m.Chat.ID) {
		log.Printf("–ß–∞—Ç %d –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è", m.Chat.ID)
		return
	}

	message := Message{
		ChatID:    m.Chat.ID,
		UserID:    m.Sender.ID,
		Username:  m.Sender.Username,
		Text:      m.Text,
		Timestamp: time.Unix(m.Unixtime, 0),
	}

	result := b.db.Create(&message)
	if result.Error != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: %v", result.Error)
	} else {
		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: —á–∞—Ç %d, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s, ID –∑–∞–ø–∏—Å–∏: %d",
			m.Chat.ID, m.Sender.Username, message.ID)
	}

	b.checkAndSaveSwearStats(m)
}

func (b *Bot) checkAndSaveSwearStats(m *telebot.Message) {
	if m.Chat.ID > 0 {
		return
	}

	swearWords := []string{
		"–±–ª—è—Ç—å", "—Ö—É–π", "–ø–∏–∑–¥–∞", "–µ–±–∞—Ç—å", "—Å—É–∫–∞", "–≥–æ–≤–Ω–æ", "–¥–µ—Ä—å–º–æ",
		"–º—É–¥–∞–∫", "–¥–æ–ª–±–æ–µ–±", "—É–±–ª—é–¥–æ–∫", "—Å–≤–æ–ª–æ—á—å", "–ø–∞–¥–ª–∞", "–≥–∞–≤–Ω–æ",
		"—Ö—Ä–µ–Ω", "—Ö–µ—Ä–Ω—è", "–æ—Ö—É–µ—Ç—å", "–∑–∞–µ–±–∞—Ç—å", "–ø—Ä–æ–µ–±–∞—Ç—å", "–Ω–∞–µ–±–∞—Ç—å",
	}

	text := strings.ToLower(m.Text)
	for _, swear := range swearWords {
		if strings.Contains(text, swear) {
			var stat SwearStats
			result := b.db.Where("chat_id = ? AND user_id = ? AND swear_word = ?",
				m.Chat.ID, m.Sender.ID, swear).First(&stat)

			if result.Error == nil {
				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
				b.db.Model(&stat).Updates(SwearStats{
					Count:     stat.Count + 1,
					UpdatedAt: time.Now(),
				})
			} else {
				newStat := SwearStats{
					ChatID:    m.Chat.ID,
					UserID:    m.Sender.ID,
					Username:  m.Sender.Username,
					SwearWord: swear,
					Count:     1,
					UpdatedAt: time.Now(),
				}
				b.db.Create(&newStat)
			}
		}
	}
}

func (b *Bot) getMessagesForPeriod(chatID int64, days int) ([]Message, error) {
	var messages []Message
	startDate := time.Now().AddDate(0, 0, -days).Truncate(24 * time.Hour)
	endDate := startDate.Add(24 * time.Hour)

	err := b.db.Where("chat_id = ? AND timestamp >= ? AND timestamp < ?",
		chatID, startDate, endDate).
		Order("timestamp ASC").
		Find(&messages).Error

	return messages, err
}

func (b *Bot) generateSummary(messages []Message, period string) (string, error) {
	if len(messages) == 0 {
		return fmt.Sprintf("–ó–∞ %s –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—Å–∞–ª, –±—Ä–∞—Ç–∞–Ω ü§∑‚Äç‚ôÇÔ∏è", period), nil
	}

	if len(messages) < b.config.MinMessagesForAI {
		log.Printf("–ú–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞: %d < %d (–ø–æ—Ä–æ–≥)", len(messages), b.config.MinMessagesForAI)
		return fmt.Sprintf("–ó–∞ %s –±—ã–ª–æ –≤—Å–µ–≥–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ, –±—Ä–∞—Ç–∞–Ω üì±\n\n–ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—é–º–µ –∫–æ–≥–¥–∞ –Ω–∞—Ä–æ–¥ –ø–æ–±–æ–ª—å—à–µ –ø–æ–æ–±—â–∞–µ—Ç—Å—è! (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º %d —Å–æ–æ–±—â–µ–Ω–∏–π)",
			period, len(messages), b.config.MinMessagesForAI), nil
	}

	log.Printf("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º %d —Å–æ–æ–±—â–µ–Ω–∏–π –≤ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", len(messages))

	var textBuilder strings.Builder
	for _, msg := range messages {
		textBuilder.WriteString(fmt.Sprintf("[%s] %s: %s\n",
			msg.Timestamp.Format("15:04"), msg.Username, msg.Text))
	}

	systemPrompt := `–¢—ã –∫—Ä—É—Ç–æ–π –ø–∞—Ü–∞–Ω —Å —Ä–∞–π–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç–∏–∫–∏ –∏ –¥–µ–ª–∞—Ç—å –æ–≥–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –¥–ª—è –∫–æ—Ä–µ—à–µ–π. 

–í–ê–ñ–ù–û - –ê–ù–ê–õ–ò–ó–ò–†–£–ô –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø:
- –ü–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ —á–∞—Ç–µ
- –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Å–æ–±—ã—Ç–∏—è, –∏–º–µ–Ω–∞, —Ç–µ–º—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–ª–æ –∏–ª–∏ –æ–Ω–∏ —Å–∫—É—á–Ω—ã–µ - —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏ –æ–± —ç—Ç–æ–º
- –¢–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞–π —Ñ–∞–∫—Ç—ã, –Ω–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ –∫–ª–∞—Å—Å–Ω–æ–º —Å—Ç–∏–ª–µ

–¢–≤–æ–π —Å—Ç–∏–ª—å:
- –ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –±—Ä–∞—Ç–∞–Ω - –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —Å –ø—Ä–∏–∫–æ–ª—å–Ω—ã–º–∏ —Ñ—Ä–∞–∑–æ—á–∫–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–ª–µ–Ω–≥: "–±—Ä–∞—Ç–∞–Ω", "—á–µ–ª", "—Ç–µ–º–∞", "–¥–≤–∏–∂", "–∫–∞–π—Ñ", "–∂–µ—Å—Ç—å" –∏ —Ç.–¥.
- –≠–º–æ–¥–∑–∏ —Å—Ç–∞–≤–∏—à—å –∫ –º–µ—Å—Ç—É, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏–≤–∞–µ—à—å
- –ü–∏—à–µ—à—å –∂–∏–≤–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –∫–æ—Ä–µ—à—É —á—Ç–æ –±—ã–ª–æ
- –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–∫—É—á–Ω–æ–µ - —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏—à—å –æ–± —ç—Ç–æ–º

–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å:
- –í—ã–¥–µ–ª—è–µ—à—å 3-6 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–º/—Å–æ–±—ã—Ç–∏–π –ò–ó –†–ï–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
- –ì—Ä—É–ø–ø–∏—Ä—É–µ—à—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º
- –°–æ—Ö—Ä–∞–Ω—è–µ—à—å –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: —Å—Å—ã–ª–∫–∏, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Ä–µ—à–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å HTML —Ç–µ–≥–∏: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>
- –ü–∏—à–µ—à—å 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É, –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

üî• <b>–ß—Ç–æ –±—ã–ª–æ –∂–∞—Ä–∫–æ:</b>
‚Ä¢ [—Ç–µ–º–∞ —Å —ç–º–æ–¥–∑–∏] - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¢–û–õ–¨–ö–û –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

üí¨ <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–≤–∏–∂–∏:</b>
‚Ä¢ [–¥–≤–∏–∂ 1 –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π]
‚Ä¢ [–¥–≤–∏–∂ 2 –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π]

üîó <b>–ü–æ–ª–µ–∑–Ω—è–∫:</b> (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏/—Ä–µ—à–µ–Ω–∏—è)
‚Ä¢ [—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ]

–ì–ª–∞–≤–Ω–æ–µ - –ø–∏—à–∏ –∫–∞–∫ –ø–∞—Ü–∞–Ω –¥–ª—è –ø–∞—Ü–∞–Ω–æ–≤, –Ω–æ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–∞–∫—Ç–∞–º –∏–∑ —á–∞—Ç–∞!`

	userPrompt := fmt.Sprintf(`–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ –∏ —Å–¥–µ–ª–∞–π —Ä–µ–∑—é–º–µ –∑–∞ %s. 

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ!

–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %d

–°–æ–æ–±—â–µ–Ω–∏—è:
%s`, period, len(messages), textBuilder.String())

	resp, err := b.openai.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: b.config.OpenAIModel,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleSystem,
					Content: systemPrompt,
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: userPrompt,
				},
			},
			MaxTokens:   b.config.MaxTokens,
			Temperature: 0.3,
		},
	)

	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ OpenAI API: %v", err)
	}

	if len(resp.Choices) == 0 {
		return "–ù–µ —Å–º–æ–≥ –∑–∞–º—É—Ç–∏—Ç—å —Ä–µ–∑—é–º–µ, –±—Ä–∞—Ç–∞–Ω üòû", nil
	}

	return resp.Choices[0].Message.Content, nil
}

func (b *Bot) handleSummaryRequest(c telebot.Context) error {
	message := c.Message()

	if c.Chat().ID > 0 {
		return c.Reply("‚ùå Summary –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö, –±—Ä–∞—Ç–∞–Ω! ü§ñ")
	}

	if !b.isChatAllowed(c.Chat().ID) {
		if b.config.RequireApproval && c.Chat().ID < 0 {
			chatTitle := c.Chat().Title
			if chatTitle == "" {
				chatTitle = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
			}

			b.requestChatApproval(c.Chat().ID, chatTitle, c.Sender().ID, c.Sender().Username)

			return c.Reply("‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —á–∞—Ç—É –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω.\n\n" +
				"üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n" +
				"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
		}

		return c.Reply("‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.")
	}

	text := strings.ToLower(message.Text)
	var days int
	var period string

	if strings.Contains(text, "—Å–µ–≥–æ–¥–Ω—è") {
		days = 0
		period = "—Å–µ–≥–æ–¥–Ω—è"
	} else if strings.Contains(text, "–≤—á–µ—Ä–∞") {
		days = 1
		period = "–≤—á–µ—Ä–∞"
	} else if strings.Contains(text, "–ø–æ–∑–∞–≤—á–µ—Ä–∞") {
		days = 2
		period = "–ø–æ–∑–∞–≤—á–µ—Ä–∞"
	} else {
		re := regexp.MustCompile(`(\d+)\s*–¥–Ω`)
		matches := re.FindStringSubmatch(text)
		if len(matches) > 1 {
			if d, err := strconv.Atoi(matches[1]); err == nil && d <= 7 {
				days = d
				period = fmt.Sprintf("%d –¥–Ω–µ–π –Ω–∞–∑–∞–¥", d)
			} else {
				return c.Reply("–ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—é–º–µ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π üìÖ")
			}
		} else {
			return c.Reply("–ù–∞–ø–∏—à–∏ '@zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞/–ø–æ–∑–∞–≤—á–µ—Ä–∞' –∏–ª–∏ '@zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ N –¥–Ω–µ–π' (–º–∞–∫—Å 7)")
		}
	}

	log.Printf("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—é–º–µ –¥–ª—è —á–∞—Ç–∞ %d –Ω–∞ –ø–µ—Ä–∏–æ–¥: %s (–¥–Ω–µ–π –Ω–∞–∑–∞–¥: %d)", c.Chat().ID, period, days)

	statusMsg, _ := c.Bot().Send(c.Chat(), "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∑—é–º–µ... ‚è≥")

	messages, err := b.getMessagesForPeriod(c.Chat().ID, days)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ %d: %v", c.Chat().ID, err)
		c.Bot().Delete(statusMsg)
		return c.Reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π üòû")
	}

	log.Printf("–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∑—é–º–µ: %d", len(messages))

	summary, err := b.generateSummary(messages, period)
	if err != nil {
		c.Bot().Delete(statusMsg)
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ: %v", err)
		return c.Reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ ü§ñ")
	}

	chatSummary := ChatSummary{
		ChatID:  c.Chat().ID,
		Date:    time.Now().AddDate(0, 0, -days).Truncate(24 * time.Hour),
		Summary: summary,
	}
	b.db.Create(&chatSummary)

	c.Bot().Delete(statusMsg)

	summaryText := fmt.Sprintf("üìã <b>–†–µ–∑—é–º–µ –∑–∞ %s</b>\n\n%s\n\n<i>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %d</i>",
		period, summary, len(messages))

	return c.Reply(summaryText, &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

func (b *Bot) handleStart(c telebot.Context) error {
	if c.Chat().ID > 0 {
		if b.isAdmin(c.Sender().ID) {
			welcomeText := `–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üëë

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /approve <chat_id> - –æ–¥–æ–±—Ä–∏—Ç—å —á–∞—Ç
‚Ä¢ /reject <chat_id> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
‚Ä¢ /pending - –ø–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ /allowed - —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤

–í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã:
‚Ä¢ /roast_random - –∂–µ—Å—Ç–∫–∏–π –ø–æ–¥–∫–æ–ª —Å–ª—É—á–∞–π–Ω–æ–º—É –∫–æ—Ä–µ—à—É üî•
‚Ä¢ /reminder_random - "–≤–∞–∂–Ω–æ–µ" –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º—É-—Ç–æ üòè

Summary –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö! ü§ñ`
			return c.Reply(welcomeText)
		} else {
			return c.Reply("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –ø–æ–ø—Ä–æ—Å–∏ —Ä–µ–∑—é–º–µ!")
		}
	}

	if !b.isChatAllowed(c.Chat().ID) {
		if b.config.RequireApproval {
			chatTitle := c.Chat().Title
			if chatTitle == "" {
				chatTitle = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
			}

			b.requestChatApproval(c.Chat().ID, chatTitle, c.Sender().ID, c.Sender().Username)

			return c.Reply("‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —á–∞—Ç—É –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω.\n\n" +
				"üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n" +
				"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
		}

		return c.Reply("‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.")
	}

	welcomeText := `–ü—Ä–∏–≤–µ—Ç! üëã 

–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ —á–∞—Ç–∞. –ü—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏ –º–µ–Ω—è –∏ —Å–∫–∞–∂–∏:
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ –≤—á–µ—Ä–∞  
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ –ø–æ–∑–∞–≤—á–µ—Ä–∞
‚Ä¢ @zagichak_bot —á—Ç–æ –±—ã–ª–æ –∑–∞ 3 –¥–Ω—è

–¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π:
‚Ä¢ /roast_random - –∂–µ—Å—Ç–∫–∏–π –ø–æ–¥–∫–æ–ª —Å–ª—É—á–∞–π–Ω–æ–º—É –∫–æ—Ä–µ—à—É üî•
‚Ä¢ /reminder_random - "–≤–∞–∂–Ω–æ–µ" –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º—É-—Ç–æ üòè
‚Ä¢ /top_mat - —Ç–æ–ø –º–∞—Ç–µ—Ä—à–∏–Ω–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ ü§¨

–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–¥–∞–º —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! ü§ñ‚ú®`

	return c.Reply(welcomeText)
}

func (b *Bot) handleUserJoined(c telebot.Context) error {
	// –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
	if c.Chat().ID > 0 || !b.isChatAllowed(c.Chat().ID) {
		return nil
	}

	for _, user := range c.Message().UsersJoined {
		if user.IsBot {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
		}

		username := user.Username
		if username == "" {
			username = user.FirstName
		}

		greetings := []string{
			"–û, –ø—Ä–∏–≤–µ—Ç %s! üëã –•—É–π —Å–æ—Å–∞–ª? –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è! üòè",
			"–°–º–æ—Ç—Ä–∏—Ç–µ –∫—Ç–æ –∫ –Ω–∞–º –∑–∞–≥–ª—è–Ω—É–ª! üëÄ %s, –Ω–∞–¥–µ—é—Å—å –Ω–µ –∏–∑ –ø–æ–ª–∏—Ü–∏–∏? üöî",
			"–ï–±–∞–∞–∞, %s –≤ –∑–¥–∞–Ω–∏–∏! üéâ –°—Ä–∞–∑—É –≤–∏–¥–Ω–æ - —á–µ–ª–æ–≤–µ–∫ —Å —Ö–æ—Ä–æ—à–∏–º –≤–∫—É—Å–æ–º üòé",
			"%s –ø–æ–¥—Ç—è–Ω—É–ª—Å—è! üí™ –ë—Ä–∞—Ç–∞–Ω, —Ç—É—Ç –≤–µ—Å–µ–ª–æ, –æ—Å—Ç–∞–≤–∞–π—Å—è! üî•",
			"–û –±–æ–∂–µ, %s! üò± –¢—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ —Ç–æ—Ç —Å–∞–º—ã–π –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–∞—Ä–µ–Ω—å? üåü",
			"–ó–¥–∞—Ä–æ–≤–∞ %s! ü§ò –ú–∞–º–∫–µ –Ω–µ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ —Ç—É—Ç —Å–∏–¥–∏—à—å, –ª–∞–¥–Ω–æ? ü§´",
			"–í–∞—É, %s! üé™ –¶–∏—Ä–∫ –ø–æ—Ç–µ—Ä—è–ª –∫–ª–æ—É–Ω–∞ –∏–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ –≤ –≥–æ—Å—Ç–∏? ü§°",
			"%s –Ω–∞ —Å–≤—è–∑–∏! üì° –ù–∞–¥–µ—é—Å—å —É —Ç–µ–±—è –∫—Ä–µ–ø–∫–∏–µ –Ω–µ—Ä–≤—ã, —Ç—É—Ç –æ—Ç—Ä—ã–≤–∞–µ–º—Å—è –ø–æ –ø–æ–ª–Ω–æ–π! üé≠",
			"–ì–ª—è–Ω—å-–∫–∞, %s –æ–±—ä—è–≤–∏–ª—Å—è! üëÅÔ∏è –°—Ä–∞–∑—É –≤–∏–¥–Ω–æ - –∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç –±–ª—è–¥—å! üé©",
			"–≠–π %s! üó£Ô∏è –í–æ–¥–∫–∞ –µ—Å—Ç—å? –ù–µ—Ç? –ù—É —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–¥–∏, –ø–æ–æ–±—â–∞–π—Å—è! üçª",
			"–û –º–∞–π –≥–∞–¥, %s! üò≤ –¢—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∫ –Ω–∞–º –∏–ª–∏ GPS –æ–±–æ—Å—Ä–∞–ª—Å—è? üó∫Ô∏è",
			"%s –≤ —á–∞—Ç–µ! üéä –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ –ø–æ –∂–∏–∑–Ω–∏ –¥–µ–ª–∞–µ—à—å! üíº",
			"–í–æ—Ç —ç—Ç–æ –¥–∞, %s! üéØ –¢–æ—á–Ω–æ –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–ª —á–∞—Ç? –ú—ã —Ç—É—Ç –¥–∏—á—å —Ç–≤–æ—Ä–∏–º! ü¶å",
			"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å %s! üè† –¢–∞–ø–∫–∏ —Å–Ω—è–ª? –ü—Ä–æ—Ö–æ–¥–∏, —Ä–∞—Å–ø–æ–ª–∞–≥–∞–π—Å—è! üëü",
			"–û–≥–æ, %s –ø–æ–¥—ä–µ—Ö–∞–ª! üöó –ë–µ–Ω–∑–∏–Ω –∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫—É—á–Ω–æ —Å—Ç–∞–ª–æ? ‚õΩ",
		}

		randomIndex := rand.Intn(len(greetings))
		greeting := fmt.Sprintf(greetings[randomIndex], escapeHTML(username))

		c.Reply(greeting, &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	return nil
}

func (b *Bot) generateRoastForUser(username string, chatID int64) (string, error) {
	systemPrompt := `–¢—ã –∑–ª–æ–±–Ω—ã–π –ø–∞—Ü–∞–Ω —Å —Ä–∞–π–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∂–µ—Å—Ç–∫–∏–µ, –Ω–æ –¥—Ä—É–∂–µ—Å–∫–∏–µ –ø–æ–¥–∫–æ–ª—ã. 

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–¥–µ–ª–∞—Ç—å –ñ–ï–°–¢–ö–ò–ô, –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥—è—â–∏–π –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–∫–æ–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –≤ –¥—Ä—É–∂–µ—Å–∫–æ–º —á–∞—Ç–µ.

–í–ê–ñ–ù–û:
- –ü–æ–¥–∫–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ñ–ï–°–¢–ö–ò–ú, –Ω–æ –Ω–µ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–º
- –≠—Ç–æ –¥—Ä—É–∂–µ—Å–∫–∏–π —á–∞—Ç, –≤—Å–µ —Å–≤–æ–∏ - –º–æ–∂–Ω–æ —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å –±–æ–ª—å—à–µ
- –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ, –æ—Å—Ç—Ä–æ—É–º–Ω—ã–µ –ø–æ–¥—ä–µ–±–∫–∏
- –ù–∏–∫–∞–∫–∏—Ö —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –≤–µ—Å–µ–ª–∞—è –∂–µ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, —Å–ª–µ–Ω–≥, —é–º–æ—Ä
- –î–ª–∏–Ω–∞: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º
- –ú–æ–∂–µ—à—å –ø–æ—à—É—Ç–∏—Ç—å –Ω–∞–¥ –≤–Ω–µ—à–Ω–æ—Å—Ç—å—é, –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º, –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ (–≤ —Ä–∞–º–∫–∞—Ö –¥—Ä—É–∂–µ—Å–∫–æ–≥–æ —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞)

–°—Ç–∏–ª—å:
- –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –ø–∞—Ü–∞–Ω —Å —É–ª–∏—Ü—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞: "–±—Ä–∞—Ç–∞–Ω", "—á–µ–ª", "–∫–æ—Ä–µ—à", "–ª–æ—Ö", "–∂–µ—Å—Ç—å" –∏ —Ç.–¥.
- –ú–æ–∂–Ω–æ —Å–ª–µ–≥–∫–∞ –º–∞—Ç–µ—Ä–Ω—ã–π —é–º–æ—Ä –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–∏–ª–∏—á–∏—è
- –û—Å—Ç—Ä—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –ø—Ä–æ—Å—Ç–æ –∂–µ—Å—Ç–∫–∏–π –ø–æ–¥–∫–æ–ª –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.`

	userPrompt := fmt.Sprintf(`–°–¥–µ–ª–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∂–µ—Å—Ç–∫–∏–π, –Ω–æ –¥—Ä—É–∂–µ—Å–∫–∏–π –ø–æ–¥–∫–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–∏–∫–æ–º "%s". 
–≠—Ç–æ –¥—Ä—É–∂–µ—Å–∫–∏–π —á–∞—Ç, –≤—Å–µ –∫–æ—Ä–µ—à—ã, –º–æ–∂–Ω–æ –∂–µ—Å—Ç–∫–æ —Ç—Ä–æ–ª–∏—Ç—å!`, username)

	resp, err := b.openai.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: b.config.OpenAIModel,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleSystem,
					Content: systemPrompt,
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: userPrompt,
				},
			},
			MaxTokens:   200,
			Temperature: 0.8,
		},
	)

	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ OpenAI API: %v", err)
	}

	if len(resp.Choices) == 0 {
		return "–î–∞–∂–µ —è –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Ç–µ–±—è –ø–æ–¥–∫–æ–ª–æ—Ç—å, –±—Ä–∞—Ç–∞–Ω üòÇ", nil
	}

	return resp.Choices[0].Message.Content, nil
}

func (b *Bot) generateRandomReminder(username string) (string, error) {
	systemPrompt := `–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –Ω–æ –∂–µ—Å—Ç–∫–∏–π –∫–æ—Ä–µ—à, –∫–æ—Ç–æ—Ä—ã–π "–Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç" –ª—é–¥—è–º –æ —Ä–∞–∑–Ω–æ–π —Ñ–∏–≥–Ω–µ.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–º–µ—à–Ω–æ–µ "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ—Å—Ç–æ –∂–µ—Å—Ç–∫–∏–π –ø—Ä–∏–∫–æ–ª.

–í–ê–ñ–ù–û:
- –≠—Ç–æ –ù–ï —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–æ–¥ –ø–æ–¥–∫–æ–ª–æ—Ç—å —á–µ–ª–æ–≤–µ–∫–∞
- –í—ã–¥—É–º—ã–≤–∞–π –∞–±—Å—É—Ä–¥–Ω—ã–µ, —Å–º–µ—à–Ω—ã–µ "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏" –∏ "–¥–µ–ª–∞"
- –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –∂–µ—Å—Ç–∫–∏–º
- –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ—Å–∫–∏–π, –Ω–æ –Ω–∞–≥–ª—ã–π —Ç–æ–Ω
- –ú–æ–∂–Ω–æ —É–ø–æ–º–∏–Ω–∞—Ç—å: —Ä–∞–±–æ—Ç—É, –±—ã—Ç, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Ö–æ–±–±–∏, –ø—Ä–∏–≤—ã—á–∫–∏
- –î–ª–∏–Ω–∞: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è:
"–≠–π {username}, —Ç—ã –∑–∞–±—ã–ª –ø–æ–∫–æ—Ä–º–∏—Ç—å —Å–≤–æ—é –¥–µ–ø—Ä–µ—Å—Å–∏—é!"
"–ù–∞–ø–æ–º–∏–Ω–∞—é {username}: –ø–æ—Ä–∞ –º–µ–Ω—è—Ç—å –Ω–æ—Å–∫–∏, —Å–æ—Å–µ–¥–∏ –∂–∞–ª—É—é—Ç—Å—è!"
"–ö–æ—Ä–µ—à {username}, —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å –≤—ã–Ω–æ—Å–∏—Ç—å –º—É—Å–æ—Ä –∏–∑ –≥–æ–ª–æ–≤—ã!"

–°—Ç–∏–ª—å:
- –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –ø–∞—Ü–∞–Ω
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞: "–±—Ä–∞—Ç–∞–Ω", "–∫–æ—Ä–µ—à", "—á–µ–ª" –∏ —Ç.–¥.
- –ñ–µ—Å—Ç–∫–∏–π —é–º–æ—Ä –≤ —Ä–∞–º–∫–∞—Ö –¥—Ä—É–∂–±—ã
- –ê–±—Å—É—Ä–¥–Ω—ã–µ "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"

–§–æ—Ä–º–∞—Ç: "–≠–π [username], [–∂–µ—Å—Ç–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ-–ø—Ä–∏–∫–æ–ª]"`

	userPrompt := fmt.Sprintf(`–ü—Ä–∏–¥—É–º–∞–π –∂–µ—Å—Ç–∫–æ–µ "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"-–ø—Ä–∏–∫–æ–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "%s". 
–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–º–µ—à–Ω–æ –∏ –∞–±—Å—É—Ä–¥–Ω–æ!`, username)

	resp, err := b.openai.CreateChatCompletion(
		context.Background(),
		openai.ChatCompletionRequest{
			Model: b.config.OpenAIModel,
			Messages: []openai.ChatCompletionMessage{
				{
					Role:    openai.ChatMessageRoleSystem,
					Content: systemPrompt,
				},
				{
					Role:    openai.ChatMessageRoleUser,
					Content: userPrompt,
				},
			},
			MaxTokens:   150,
			Temperature: 0.9,
		},
	)

	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ OpenAI API: %v", err)
	}

	if len(resp.Choices) == 0 {
		fallbackReminders := []string{
			"–≠–π %s, —Ç—ã –∑–∞–±—ã–ª –ø–æ–∫–æ—Ä–º–∏—Ç—å —Å–≤–æ—é –ª–µ–Ω—å! üò¥",
			"–ù–∞–ø–æ–º–∏–Ω–∞—é %s: –ø–æ—Ä–∞ –º–µ–Ω—è—Ç—å –Ω–æ—Å–∫–∏, –¥–∞–∂–µ —è —á—É–≤—Å—Ç–≤—É—é! üß¶",
			"–ö–æ—Ä–µ—à %s, —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å –≤—ã–Ω–æ—Å–∏—Ç—å –º—É—Å–æ—Ä –∏–∑ –≥–æ–ª–æ–≤—ã! üóëÔ∏è",
			"–ë—Ä–∞—Ç–∞–Ω %s, —Ç—ã –æ–±–µ—â–∞–ª —Å—Ç–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–æ–º, –∫–æ–≥–¥–∞ —É–∂–µ? ü§î",
			"–≠–π %s, –º–∞–º–∫–∞ –ø—Ä–æ—Å–∏–ª–∞ –ø–µ—Ä–µ–¥–∞—Ç—å - —É–±–µ—Ä–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ! üè†",
		}
		randomIndex := rand.Intn(len(fallbackReminders))
		return fmt.Sprintf(fallbackReminders[randomIndex], username), nil
	}

	return resp.Choices[0].Message.Content, nil
}

func (b *Bot) getRandomActiveUser(chatID int64) (string, int64, error) {
	var users []struct {
		Username string
		UserID   int64
		Count    int64
	}

	sevenDaysAgo := time.Now().AddDate(0, 0, -7)

	err := b.db.Raw(`
		SELECT username, user_id, COUNT(*) as count 
		FROM messages 
		WHERE chat_id = ? AND timestamp >= ? AND username != '' 
		GROUP BY user_id, username 
		HAVING count >= 3
		ORDER BY count DESC 
		LIMIT 20
	`, chatID, sevenDaysAgo).Scan(&users)

	if err != nil || len(users) == 0 {
		return "", 0, fmt.Errorf("–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	}

	randomIndex := rand.Intn(len(users))
	selectedUser := users[randomIndex]

	return selectedUser.Username, selectedUser.UserID, nil
}

func (b *Bot) handleRoastUser(c telebot.Context) error {
	if c.Chat().ID > 0 || !b.isChatAllowed(c.Chat().ID) {
		return c.Reply("‚ùå –ü–æ–¥–∫–æ–ª—ã —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
	}

	username, _, err := b.getRandomActiveUser(c.Chat().ID)
	if err != nil {
		return c.Reply("üòî –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–æ–≥–æ –ø–æ–¥–∫–æ–ª–æ—Ç—å - –≤—Å–µ –º–æ–ª—á–∞—Ç!")
	}

	roast, err := b.generateRoastForUser(username, c.Chat().ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–æ–ª–∞: %v", err)
		return c.Reply("–°–ª–æ–º–∞–ª—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–æ–ª–æ–≤ ü§ñüí•")
	}

	return c.Reply("üî• <b>–°–ª—É—á–∞–π–Ω—ã–π –ø–æ–¥–∫–æ–ª:</b>\n\n"+roast, &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

func (b *Bot) handleReminder(c telebot.Context) error {
	if c.Chat().ID > 0 || !b.isChatAllowed(c.Chat().ID) {
		return c.Reply("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
	}

	username, _, err := b.getRandomActiveUser(c.Chat().ID)
	if err != nil {
		return c.Reply("üòî –ù–µ–∫–æ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å - –≤—Å–µ –∏—Å—á–µ–∑–ª–∏!")
	}

	reminder, err := b.generateRandomReminder(username)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: %v", err)
		return c.Reply("–ó–∞–±—ã–ª —á—Ç–æ —Ö–æ—Ç–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å ü§™")
	}

	return c.Reply("‚è∞ <b>–í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n\n"+reminder, &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

func (b *Bot) maybeDoRandomAction(c telebot.Context) {
	if c.Chat().ID > 0 || !b.isChatAllowed(c.Chat().ID) {
		return
	}

	if rand.Intn(100) != 0 {
		return
	}

	sevenDaysAgo := time.Now().AddDate(0, 0, -7)
	var userCount int64
	b.db.Raw(`
		SELECT COUNT(DISTINCT user_id) 
		FROM messages 
		WHERE chat_id = ? AND timestamp >= ?
	`, c.Chat().ID, sevenDaysAgo).Scan(&userCount)

	if userCount < 3 {
		return
	}

	actionType := rand.Intn(2)

	username, _, err := b.getRandomActiveUser(c.Chat().ID)
	if err != nil {
		return
	}

	if actionType == 0 {
		roast, err := b.generateRoastForUser(username, c.Chat().ID)
		if err != nil {
			return
		}

		message := "üéØ <b>–í–Ω–µ–∑–∞–ø–Ω—ã–π –ø–æ–¥–∫–æ–ª:</b>\n\n" + roast
		c.Bot().Send(c.Chat(), message, &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})

		log.Printf("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∫–æ–ª –¥–ª—è %s –≤ —á–∞—Ç–µ %d", username, c.Chat().ID)
	} else {
		reminder, err := b.generateRandomReminder(username)
		if err != nil {
			return
		}

		message := "üîî <b>–°—Ä–æ—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n\n" + reminder
		c.Bot().Send(c.Chat(), message, &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})

		log.Printf("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è %s –≤ —á–∞—Ç–µ %d", username, c.Chat().ID)
	}
}
func (b *Bot) handleTopMat(c telebot.Context) error {
	if c.Chat().ID > 0 || !b.isChatAllowed(c.Chat().ID) {
		return c.Reply("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
	}

	var stats []struct {
		Username string
		Total    int
	}

	b.db.Raw(`
		SELECT username, SUM(count) as total 
		FROM swear_stats 
		WHERE chat_id = ? 
		GROUP BY user_id, username 
		ORDER BY total DESC 
		LIMIT 10
	`, c.Chat().ID).Scan(&stats)

	if len(stats) == 0 {
		return c.Reply("ü§Ø –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –º–∞—Ç–µ—Ä–∏–ª—Å—è! üòá\n\n–ò–ª–∏ —è –ø—Ä–æ—Å—Ç–æ –µ—â–µ –Ω–µ —É—Å–ø–µ–ª –≤—Å–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å... ü§î")
	}

	var response strings.Builder
	response.WriteString("ü§¨ <b>–¢–æ–ø –º–∞—Ç–µ—Ä—à–∏–Ω–Ω–∏–∫–æ–≤ —á–∞—Ç–∞:</b>\n\n")

	medals := []string{"ü•á", "ü•à", "ü•â"}
	for i, stat := range stats {
		var medal string
		if i < 3 {
			medal = medals[i]
		} else {
			medal = fmt.Sprintf("%d.", i+1)
		}

		response.WriteString(fmt.Sprintf("%s <b>%s</b> - %d —Ä–∞–∑\n",
			medal, escapeHTML(stat.Username), stat.Total))
	}

	response.WriteString("\n<i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–¥–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ üìä</i>")

	return c.Reply(response.String(), &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

func (b *Bot) handleRoast(c telebot.Context) error {
	text := strings.ToLower(c.Message().Text)

	var roastResponses []string

	if strings.Contains(text, "—Å–æ—Å–∞–ª") || strings.Contains(text, "—Å–æ—Å–∏") {
		roastResponses = []string{
			"–û–π, –∫–∞–∫–æ–π —Å–º–µ—à–Ω–æ–π üòÇ –ò–¥–∏ –ª—É—á—à–µ –º–∞–º–∫–µ –ø–æ–º–æ–≥–∏ –ø–æ—Å—É–¥—É –ø–æ–º—ã—Ç—å",
			"–í–∞—É, –∫–∞–∫–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å! ü•± –ì–æ–¥–∞ –≤ 2005 –º–æ–∂–µ—Ç –∏ –∑–∞—Å–º–µ—è–ª–∏—Å—å –±—ã",
			"–°–µ—Ä—å–µ–∑–Ω–æ? –≠—Ç–æ –ª—É—á—à–µ–µ —á—Ç–æ —Ç—ã —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å? üòÇ –°–ª–∞–±–æ–≤–∞—Ç–æ, —á–µ–ª",
			"–ö–∞–∫–æ–π –∂–µ —Ç—ã –∫–ª–æ—É–Ω ü§™ –õ–∞–¥–Ω–æ, —Ä–∞–∑–≤–µ—Å–µ–ª–∏–ª –Ω–µ–º–Ω–æ–≥–æ",
			"–¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ –¥—É–º–∞–ª —á—Ç–æ —ç—Ç–æ —Å–º–µ—à–Ω–æ? üíÄ –õ—É—á—à–µ –± –º–æ–ª—á–∞–ª, –±—Ä–∞—Ç–∞–Ω",
			"–û–≥–æ, –∫–∞–∫–æ–π –æ—Å—Ç—Ä–æ—Å–ª–æ–≤! üé≠ –ù–∞–≤–µ—Ä–Ω–æ–µ –≤ —à–∫–æ–ª–µ –∫–ª–∞—Å—Å-–∫–æ–º–∏–∫–æ–º –±—ã–ª",
			"–ú–∞–º–æ—á–∫–∞, —è —É–º–µ—é –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞! üë∂ –ü–∞–ø–µ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å?",
			"–ö–∞–∫–∞—è —Ñ–∞–Ω—Ç–∞–∑–∏—è –±—É—Ä–Ω–∞—è! üå™Ô∏è –õ—É—á—à–µ –± –Ω–∞ —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–∏–ª",
			"–ë–ª–∏–Ω, –∞–∂ –≤ –¥–µ—Ç—Å—Ç–≤–æ –≤–µ—Ä–Ω—É–ª—Å—è üè´ –¢–∞–∫–∏–µ –∂–µ —à—É—Ç–∫–∏ –≤ 5-–º –∫–ª–∞—Å—Å–µ –±—ã–ª–∏",
			"–í–∏–∂—É, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –ø—Ä–∏—Ä–æ–¥–∞ –Ω–µ –Ω–∞–≥—Ä–∞–¥–∏–ª–∞ üß† –ó–∞—Ç–æ —Å–º–µ–ª–æ—Å—Ç–∏ —Ö–≤–∞—Ç–∞–µ—Ç",
			"–ê –ø–æ—Ç–æ–º —É–¥–∏–≤–ª—è–µ–º—Å—è –ø–æ—á–µ–º—É –¥—Ä—É–∑–µ–π –Ω–µ—Ç ü§∑‚Äç‚ôÇÔ∏è",
			"–ö—Ä–∞—Å–∏–≤–æ –∏–∑–ª–∞–≥–∞–µ—à—å –º—ã—Å–ª–∏! üí≠ –ü–æ—ç—Ç, –±–ª–∏–Ω",
			"–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è –∏–ª–∏ —Ç—ã –ø—É—Ç–∞–µ—à—å –º–µ–Ω—è —Å –∑–µ—Ä–∫–∞–ª–æ–º? ü™û",
			"–ö–∞–∫–æ–π —Ç—ã –∑–∞–±–∞–≤–Ω—ã–π! üé™ –¶–∏—Ä–∫ —Ç–µ–±—è –ø–æ—Ç–µ—Ä—è–ª?",
			"–ù—É –∏ —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å! üìö –ú–∞–º–∞ –≥–æ—Ä–¥–∏—Ç—Å—è?",
			"–Ø —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é, —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –¥—É—Ä–∞–∫–∞? ü§° –ê —Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤—Ä–µ—Ç",
			"–ë—Ä–æ, —Ç–µ–±–µ —Ç–æ—á–Ω–æ –±–æ–ª—å—à–µ 10 –ª–µ—Ç? üë∂ –ê —Ç–æ —Å–æ–º–Ω–µ–Ω–∏—è –∑–∞–∫—Ä–∞–¥—ã–≤–∞—é—Ç—Å—è",
			"–ù–∏—á–µ–≥–æ, –≤—ã—Ä–∞—Å—Ç–µ—à—å - –ø–æ—É–º–Ω–µ–µ—à—å üìà –•–æ—Ç—è –Ω–µ —Ñ–∞–∫—Ç",
			"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ! üé® –ù–µ–±–æ—Å—å –≤ —É–Ω–∏–≤–µ—Ä–µ –Ω–∞ —Ñ–∏–ª—Ñ–∞–∫–µ —É—á–∏—à—å—Å—è?",
			"–ê –¥–∞–≤–∞–π –ª—É—á—à–µ –ø—Ä–æ –ø–æ–≥–æ–¥—É –ø–æ–≥–æ–≤–æ—Ä–∏–º? ‚òÄÔ∏è –ò–ª–∏ —ç—Ç–æ —Ç–æ–∂–µ —Å–ª–æ–∂–Ω–æ?",
		}
	} else if strings.Contains(text, "–¥—É—Ä–∞–∫") || strings.Contains(text, "–∏–¥–∏–æ—Ç") || strings.Contains(text, "—Ç—É–ø–æ–π") {
		roastResponses = []string{
			"–ó–µ—Ä–∫–∞–ª–æ –¥–æ–º–∞ —Å–ª–æ–º–∞–ª–æ—Å—å? ü™û –ú–æ–∂–µ—Ç –ø–æ—á–∏–Ω–∏—à—å —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ",
			"–ö—Ç–æ –±—ã –≥–æ–≤–æ—Ä–∏–ª üôÑ –°–Ω–∞—á–∞–ª–∞ –Ω–∞ —Å–µ–±—è –ø–æ—Å–º–æ—Ç—Ä–∏",
			"–ü—Ä–æ–µ–∫—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è üìΩÔ∏è –ò–∑—É—á–∏ —ç—Ç–æ—Ç —Ç–µ—Ä–º–∏–Ω",
			"–°–∞–º–æ–∫—Ä–∏—Ç–∏—á–Ω–æ! –ù–æ —è-—Ç–æ —Ç—É—Ç –ø—Ä–∏—á–µ–º? üòè",
			"–î–∏–∞–≥–Ω–æ–∑ —Å–µ–±–µ —Å—Ç–∞–≤–∏—à—å? –ú–æ–ª–æ–¥–µ—Ü, —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –µ—Å—Ç—å ü§ì",
			"–ê–≤—Ç–æ–ø–æ—Ä—Ç—Ä–µ—Ç —Ä–∏—Å—É–µ—à—å? üé® –ü–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ—Ö–æ–∂–µ!",
			"–ì–æ–≤–æ—Ä–∏—à—å –æ —Ç–æ–º, —á—Ç–æ –∑–Ω–∞–µ—à—å –ª—É—á—à–µ –≤—Å–µ–≥–æ? üéØ –†–µ—Å–ø–µ–∫—Ç –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å",
			"–ê —Ç—ã —Ö–æ—Ä–æ—à–æ —Å–µ–±—è –∑–Ω–∞–µ—à—å! ü§ù –°–∞–º–æ–∞–Ω–∞–ª–∏–∑ - –ø–æ–ª–µ–∑–Ω–∞—è —à—Ç—É–∫–∞",
			"–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ! üë®‚Äçüéì –í–∏–¥–∏–º–æ, –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ —Ç—ã –ø—Ä–æ—Ñ–∏",
			"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –∞ –æ—Ç–∫—É–¥–∞ —Ç–∞–∫–∏–µ –ø–æ–∑–Ω–∞–Ω–∏—è? ü§î –õ–∏—á–Ω—ã–π –æ–ø—ã—Ç?",
			"–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –æ —Å–µ–±–µ? üìñ –ê–≤—Ç–æ–±–∏–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è",
			"–ö–∞–∫–∞—è —Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∞! üëè –ù–æ –ø—Ä–∏—á–µ–º —Ç—É—Ç —è?",
			"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É! üìù –¢–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–º –æ—à–∏–±—Å—è",
			"–û–≥–æ, –∫–∞–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞! üíØ –ß–µ—Å—Ç–Ω—ã–π —Ç—ã –ø–∞—Ä–µ–Ω—å",
			"–î–µ–ª–∏—à—å—Å—è –æ–ø—ã—Ç–æ–º? üéì –¶–µ–Ω–∏–º —Ç–≤–æ—é –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å",
			"–ê —Ç—ã —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ! üß† –û—Ç–∫—É–¥–∞ –∑–Ω–∞–Ω–∏—è?",
			"–í–∏–¥–∏–º–æ, –≥–æ–≤–æ—Ä–∏—à—å –∏–∑ –ª–∏—á–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ üíº –£–≤–∞–∂–∞—é —ç–∫—Å–ø–µ—Ä—Ç–æ–≤",
			"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è! üé™ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É",
			"–¢—ã –ø—Ä–æ —Å–µ–±—è –∏–ª–∏ –≤—Å—ë-—Ç–∞–∫–∏ –æ–±–æ –º–Ω–µ? ü§∑‚Äç‚ôÇÔ∏è –ê —Ç–æ —è –∑–∞–ø—É—Ç–∞–ª—Å—è",
			"–ö–∞–∫–æ–π —Ç—ã –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π! üí´ –†–µ–¥–∫–æ –≤—Å—Ç—Ä–µ—Ç–∏—à—å —Ç–∞–∫—É—é —á–µ—Å—Ç–Ω–æ—Å—Ç—å",
			"–ù—É –∏ —Å–∞–º–æ–æ—Ü–µ–Ω–æ—á–∫–∞! üìä –ü—Å–∏—Ö–æ–ª–æ–≥ –±—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è",
		}
	} else if strings.Contains(text, "–≥–µ–π") || strings.Contains(text, "–ø–∏–¥–æ—Ä") {
		roastResponses = []string{
			"2007 –≥–æ–¥ –Ω–∞ —Å–≤—è–∑–∏ üìû –•–æ—á–µ—Ç —Å–≤–æ–∏ —à—É—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ",
			"–ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —é–º–æ—Ä! üè≥Ô∏è‚Äçüåà –î–µ–¥—É—à–∫–∞ –±—ã –≥–æ—Ä–¥–∏–ª—Å—è",
			"–û–π, –±–æ—é—Å—å-–±–æ—é—Å—å üò± –ò–¥–∏ –ª—É—á—à–µ –¥—Ä—É–∑–µ–π –Ω–∞–π–¥–∏",
			"–¢–µ–±–µ –ª–µ—Ç —Å–∫–æ–ª—å–∫–æ, 12? üë∂ –ü–æ–¥—Ä–∞—Å—Ç–∏ —Å–Ω–∞—á–∞–ª–∞",
			"–í—Ä–µ–º–µ–Ω–∞ –º–µ–Ω—è—é—Ç—Å—è, –∞ —Ç—ã –Ω–µ—Ç ü¶ï –≠–≤–æ–ª—é—Ü–∏—è –º–∏–º–æ –ø—Ä–æ—à–ª–∞?",
			"–í–∞—É, –∫–∞–∫–∞—è –∞—Ä—Ö–∞–∏–∫–∞! üè∫ –ú—É–∑–µ–π —Ç–µ–±—è –ø–æ—Ç–µ—Ä—è–ª?",
			"–°–æ–≤—Å–µ–º —Ñ–∞–Ω—Ç–∞–∑–∏—è –∏—Å—Å—è–∫–ª–∞? üé≠ –•–æ—Ç—å –±—ã —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–¥—É–º–∞–ª",
			"–ê —Ç—ã —Ç–æ—á–Ω–æ –≤ –∫—É—Ä—Å–µ, –∫–∞–∫–æ–π —Å–µ–π—á–∞—Å –≥–æ–¥? üìÖ –í—Ä–µ–º—è –∏–¥–µ—Ç, –∑–Ω–∞–µ—à—å –ª–∏",
			"–î—É–º–∞–µ—à—å, —ç—Ç–æ –∫–æ–≥–æ-—Ç–æ –∑–∞–¥–µ–≤–∞–µ—Ç? üòÇ –ú–∏–ª–æ, —á–µ—Å—Ç–Ω–æ–µ —Å–ª–æ–≤–æ",
			"–ö–∞–∫–æ–π —Ç—ã –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π! üèõÔ∏è –î–µ–¥—É—à–∫–∏–Ω—ã —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Ö—Ä–∞–Ω–∏–º?",
			"–û–≥–æ, –ø—Ä—è–º–æ 90-–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å! üìº –ù–æ—Å—Ç–∞–ª—å–≥–∏—è –ø–æ –¥–µ—Ç—Å—Ç–≤—É?",
			"–ê —á—Ç–æ, –ø–æ-–¥—Ä—É–≥–æ–º—É –æ–±–∏–¥–µ—Ç—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è? ü§î –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –∫–æ–Ω—á–∏–ª—Å—è?",
			"–ë–æ–∏—à—å—Å—è —á–µ–≥–æ-—Ç–æ? üò∞ –ê —Ç–æ —Ç–∞–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—à—å",
			"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —É —Ç–µ–±—è –∫–æ–º–ø–ª–µ–∫—Å—ã üß† –° –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
			"–¢–∞–∫–æ–µ –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ —Ç—ã –≤ 2000-—Ö –∑–∞—Å—Ç—Ä—è–ª ‚è∞ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏?",
			"–ê —Ç—ã —Ç–æ—á–Ω–æ –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–ª –≤–µ–∫–∞? üï∞Ô∏è –°–µ–π—á–∞—Å –≤—Å—ë-—Ç–∞–∫–∏ 21-–π",
			"–ü–∞–ø–∞ —Ç–∞–∫ —É—á–∏–ª? üë® –ò–ª–∏ —Å–∞–º –¥–æ —Ç–∞–∫–æ–≥–æ –¥–æ—à–µ–ª?",
			"–ö–∞–∫–∏–µ —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø—ã! üìö –í –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–∞—á–∏—Ç–∞–ª—Å—è?",
			"–ê –¥–∞–≤–∞–π –±–µ–∑ —è—Ä–ª—ã–∫–æ–≤? üè∑Ô∏è –ò–ª–∏ –¥—É–º–∞—Ç—å —Å–ª–æ–∂–Ω–æ?",
			"–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —Ç—ã —á—Ç–æ-—Ç–æ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—à—å ü§∑‚Äç‚ôÇÔ∏è –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–º–∞?",
		}
	} else {
		roastResponses = []string{
			"–Æ–º–æ—Ä–∏—Å—Ç –Ω–∞—à–µ–ª—Å—è ü§° –í –¥–µ—Ç—Å–∫–æ–º —Å–∞–¥—É —Ç–∞–∫–∏—Ö —à—É—Ç–æ–∫ –Ω–µ –±—ã–ª–æ –¥–∞–∂–µ",
			"–ö–æ–º–∏–∫ –¥–æ–º–æ—Ä–æ—â–µ–Ω–Ω—ã–π üò¥ –ò–¥–∏ –ª—É—á—à–µ —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –¥–µ–ª–∞–π",
			"–•–∞—Ö–∞—Ö–∞, –æ—á–µ–Ω—å —Å–º–µ—à–Ω–æ... –ù–ï–¢ üôÑ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—Å—è",
			"–û, —É –Ω–∞—Å —Ç—É—Ç –∫–æ–º–µ–¥–∏–∞–Ω—Ç! üé≠ –¢–æ–ª—å–∫–æ —à—É—Ç–∫–∏ —Ç–≤–æ–∏ –∫–∞–∫ –∞–Ω–µ–∫–¥–æ—Ç—ã –æ—Ç –¥–µ–¥—É—à–∫–∏",
			"–¢—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –∏–∑ –ö–í–ù —Å–±–µ–∂–∞–ª? üòè –¢–∞–∫–æ–π –∂–µ —É—Ä–æ–≤–µ–Ω—å —é–º–æ—Ä–∞",
			"–ö–∞–∫–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å! üé® –ù–µ–±–æ—Å—å –≤—Å—é –Ω–æ—á—å –ø—Ä–∏–¥—É–º—ã–≤–∞–ª",
			"–ú–∞–º, —Å–º–æ—Ç—Ä–∏, —è —É–º–µ—é –º–∞—Ç—é–∫–∞—Ç—å—Å—è! üë∂ –í—ã—Ä–∞—Å—Ç–µ—à—å - –ø–æ–π–º–µ—à—å –∫–∞–∫ –≥–ª—É–ø–æ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç",
			"–û–≥–æ, –∫–∞–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å! üåü –ù–æ–±–µ–ª–µ–≤—Å–∫—É—é –ø—Ä–µ–º–∏—é –¥–∞—é—Ç –∑–∞ —Ç–∞–∫–æ–µ?",
			"–ë–ª–µ—Å—Ç—è—â–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç! ‚ú® –ù–∞–≤–µ—Ä–Ω–æ–µ –≤ —à–∫–æ–ª–µ –º–µ–¥–∞–ª—å –∑–∞ –æ—Å—Ç—Ä–æ—É–º–∏–µ –ø–æ–ª—É—á–∞–ª",
			"–£—Ö —Ç—ã, –∫–∞–∫–æ–π –æ—Å—Ç—Ä—ã–π —è–∑—ã—á–æ–∫! üëÖ –†–æ–¥–∏—Ç–µ–ª–∏ –≥–æ—Ä–¥—è—Ç—Å—è –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ–º?",
			"–í–∏–¥–∏–º–æ —Å–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å! üìÖ –ò–ª–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç–∞–∫–æ–π —É—Å–ø–µ—à–Ω—ã–π?",
			"–ê —Ç—ã —Ç–æ—á–Ω–æ –Ω–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±–∏–¥—á–∏–∫? üíº –¢–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ä–µ–¥–∫–æ –≤—Å—Ç—Ä–µ—Ç–∏—à—å",
			"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –æ–±—â–µ–Ω–∏—é! ü§ù –í —É–Ω–∏–≤–µ—Ä–µ –Ω–∞ —Ç–∞–∫—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —É—á–∞—Ç?",
			"–ö–∞–∫–æ–π —Ç—ã —Ö—Ä–∞–±—Ä—ã–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ! üí™ –ê –≤ —Ä–µ–∞–ª–µ —Ç–∞–∫ –∂–µ —Å–º–µ–ª?",
			"–ù–∏—á–µ–≥–æ, –±—ã–≤–∞–µ—Ç ü§∑‚Äç‚ôÇÔ∏è –£ –≤—Å–µ—Ö –ø–ª–æ—Ö–∏–µ –¥–Ω–∏ —Å–ª—É—á–∞—é—Ç—Å—è",
			"–ê –¥–∞–≤–∞–π –ª—É—á—à–µ –æ —á–µ–º-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–º? ‚òÄÔ∏è –ò–ª–∏ —Ç–æ–ª—å–∫–æ —Ä—É–≥–∞—Ç—å—Å—è —É–º–µ–µ—à—å?",
			"–¢–∞–∫–æ–µ –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ —Ç–µ–±—è –∫—Ç–æ-—Ç–æ –æ–±–∏–¥–µ–ª üò¢ –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
			"–í–∏–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ –æ—á–µ–Ω—å üòî –ú–æ–∂–µ—Ç —á–∞—é –ø–æ–ø—å–µ—à—å?",
			"–ê —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –µ—Å—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—â–µ–Ω–∏—è? üó£Ô∏è",
			"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞! üéØ –†–∞–±–æ—Ç–∞–µ—Ç?",
			"–¢–∞–∫–æ–π —Ç–∞–ª–∞–Ω—Ç –ø—Ä–æ–ø–∞–¥–∞–µ—Ç! üé™ –í —Ü–∏—Ä–∫ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è?",
			"–û–≥–æ, –∫–∞–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è! ‚ö° –õ—É—á—à–µ –± –≤ —Å–ø–æ—Ä—Ç –Ω–∞–ø—Ä–∞–≤–∏–ª",
			"–ê –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —Ç—ã —Ö–æ—Ä–æ—à–∏–π –ø–∞—Ä–µ–Ω—å üòä –ü—Ä–æ—Å—Ç–æ –¥–µ–Ω—å –Ω–µ—É–¥–∞—á–Ω—ã–π",
			"–î–∞–≤–∞–π –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–∏? üïäÔ∏è –ñ–∏–∑–Ω—å –∏ —Ç–∞–∫ —Å–ª–æ–∂–Ω–∞—è",
			"–ú–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è –±—ã? üëã –í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ–Ω—è–ª",
		}
	}

	randomIndex := rand.Intn(len(roastResponses))
	response := roastResponses[randomIndex]

	log.Printf("–û—Ç–≤–µ—á–∞–µ–º —É–º–Ω–∏–∫—É %s –≤ —á–∞—Ç–µ %d", c.Sender().Username, c.Chat().ID)

	return c.Reply(response)
}

func (b *Bot) isRoastMessage(text string) bool {
	cleanText := strings.ToLower(text)
	cleanText = strings.ReplaceAll(cleanText, "@"+strings.ToLower(b.config.BotUsername), "")
	cleanText = strings.TrimSpace(cleanText)

	roastTriggers := []string{
		"—Å–æ—Å–∞–ª", "—Å–æ—Å–µ—à—å", "—Å–æ—Å–∏", "–ø–∏–¥–æ—Ä", "–≥–µ–π", "–ª–æ—Ö",
		"–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π", "–¥–æ–ª–±–æ–µ–±", "–º—É–¥–∞–∫", "–µ–±–∞–Ω",
		"–¥–µ–±–∏–ª", "–ø—Ä–∏–¥—É—Ä–æ–∫", "–∫—Ä–µ—Ç–∏–Ω", "–∫–æ–∑–µ–ª", "—Å–≤–∏–Ω—å—è", "—É—Ä–æ–¥",
		"–ø–∞–¥–ª–∞", "–≥–æ–≤–Ω–æ", "—Ö—É–π", "–ø–∏–∑–¥–∞", "–µ–±–∞—Ç—å", "–±–ª—è—Ç—å",
		"—Å—É–∫–∞", "—à–ª—é—Ö–∞", "–æ–±–æ—Å—Å–∞–ª—Å—è", "–æ–±–æ—Å—Ä–∞–ª—Å—è", "—É–±–ª—é–¥–æ–∫",
	}

	for _, trigger := range roastTriggers {
		if strings.Contains(cleanText, trigger) {
			log.Printf("–ù–∞–π–¥–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä '%s' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: %s", trigger, cleanText)
			return true
		}
	}

	if len(cleanText) <= 15 && (strings.Contains(cleanText, "?") || strings.Contains(cleanText, "???")) {
		provocativePatterns := []string{
			"–∫–∞–∫ –¥–µ–ª–∞", "—á–µ –∫–∞–∫", "–∂–∏–≤–æ–π", "—Ä–∞–±–æ—Ç–∞–µ—à—å", "—Å–ø–∏—à—å", "–∫—É", "–ø—Ä–∏–≤–µ—Ç",
		}

		for _, pattern := range provocativePatterns {
			if strings.Contains(cleanText, pattern) {
				return false
			}
		}

		if strings.Count(cleanText, "?") >= 1 && len(strings.TrimSpace(strings.ReplaceAll(cleanText, "?", ""))) <= 8 {
			log.Printf("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏: %s", cleanText)
			return true
		}
	}

	return false
}

func (b *Bot) handleApprove(c telebot.Context) error {
	if !b.isAdmin(c.Sender().ID) {
		return c.Reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	args := strings.Fields(c.Message().Text)
	if len(args) < 2 {
		return c.Reply("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/approve &lt;chat_id&gt;</code>", &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	chatID, err := strconv.ParseInt(args[1], 10, 64)
	if err != nil {
		return c.Reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
	}

	result := b.db.Model(&ChatApprovalRequest{}).
		Where("chat_id = ? AND status = 'pending'", chatID).
		Update("status", "approved")

	if result.RowsAffected == 0 {
		return c.Reply("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
	}

	allowedChat := AllowedChat{
		ChatID:  chatID,
		AddedBy: c.Sender().ID,
	}

	var request ChatApprovalRequest
	if b.db.Where("chat_id = ?", chatID).First(&request).Error == nil {
		allowedChat.ChatTitle = request.ChatTitle
	}

	b.db.Create(&allowedChat)

	return c.Reply(fmt.Sprintf("‚úÖ –ß–∞—Ç %d –æ–¥–æ–±—Ä–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ!", chatID))
}

func (b *Bot) handleReject(c telebot.Context) error {
	if !b.isAdmin(c.Sender().ID) {
		return c.Reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	args := strings.Fields(c.Message().Text)
	if len(args) < 2 {
		return c.Reply("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/reject &lt;chat_id&gt;</code>", &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	chatID, err := strconv.ParseInt(args[1], 10, 64)
	if err != nil {
		return c.Reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id")
	}

	result := b.db.Model(&ChatApprovalRequest{}).
		Where("chat_id = ? AND status = 'pending'", chatID).
		Update("status", "rejected")

	if result.RowsAffected == 0 {
		return c.Reply("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
	}

	return c.Reply(fmt.Sprintf("üö´ –ó–∞–ø—Ä–æ—Å –¥–ª—è —á–∞—Ç–∞ %d –æ—Ç–∫–ª–æ–Ω–µ–Ω.", chatID))
}

func (b *Bot) handlePending(c telebot.Context) error {
	if !b.isAdmin(c.Sender().ID) {
		return c.Reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	var requests []ChatApprovalRequest
	b.db.Where("status = 'pending'").Order("created_at DESC").Find(&requests)

	if len(requests) == 0 {
		return c.Reply("üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
	}

	var response strings.Builder
	response.WriteString("üìã <b>–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n")

	for _, req := range requests {
		response.WriteString(fmt.Sprintf("üîπ <b>%s</b> (%d)\n", escapeHTML(req.ChatTitle), req.ChatID))
		response.WriteString(fmt.Sprintf("   üë§ @%s (%d)\n", escapeHTML(req.Username), req.UserID))
		response.WriteString(fmt.Sprintf("   üìÖ %s\n", req.CreatedAt.Format("02.01.2006 15:04")))
		response.WriteString(fmt.Sprintf("   ‚Ä¢ <code>/approve %d</code> <code>/reject %d</code>\n\n", req.ChatID, req.ChatID))
	}

	return c.Reply(response.String(), &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

func (b *Bot) handleAllowedChats(c telebot.Context) error {
	if !b.isAdmin(c.Sender().ID) {
		return c.Reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}

	var chats []AllowedChat
	b.db.Order("created_at DESC").Find(&chats)

	var response strings.Builder
	response.WriteString("üìã <b>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:</b>\n\n")

	for _, chatID := range b.config.AllowedChats {
		response.WriteString(fmt.Sprintf("üîπ %d <i>(–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)</i>\n", chatID))
	}

	for _, chat := range chats {
		response.WriteString(fmt.Sprintf("üîπ <b>%s</b> (%d)\n", escapeHTML(chat.ChatTitle), chat.ChatID))
		response.WriteString(fmt.Sprintf("   üìÖ %s\n\n", chat.CreatedAt.Format("02.01.2006 15:04")))
	}

	if len(chats) == 0 && len(b.config.AllowedChats) == 0 {
		response.WriteString("üì≠ –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
	}

	return c.Reply(response.String(), &telebot.SendOptions{
		ParseMode: telebot.ModeHTML,
	})
}

func (b *Bot) startHealthServer() {
	http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(map[string]string{"status": "ok"})
	})

	log.Printf("Health server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", b.config.Port)
	if err := http.ListenAndServe(":"+b.config.Port, nil); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ health —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

func main() {
	rand.Seed(time.Now().UnixNano())

	config := loadConfig()

	db, err := initDatabase(config.DatabasePath)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %v", err)
	}

	openaiClient := initOpenAI(config)

	pref := telebot.Settings{
		Token:  config.TelegramToken,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	tgBot, err := telebot.NewBot(pref)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–∞: %v", err)
	}

	bot := &Bot{
		telebot: tgBot,
		db:      db,
		openai:  openaiClient,
		config:  config,
	}

	tgBot.Handle("/start", bot.handleStart)
	tgBot.Handle("/approve", bot.handleApprove)
	tgBot.Handle("/reject", bot.handleReject)
	tgBot.Handle("/pending", bot.handlePending)
	tgBot.Handle("/allowed", bot.handleAllowedChats)
	tgBot.Handle("/roast_random", bot.handleRoastUser)
	tgBot.Handle("/reminder_random", bot.handleReminder)
	tgBot.Handle("/top_mat", bot.handleTopMat)
	tgBot.Handle(telebot.OnUserJoined, bot.handleUserJoined)

	tgBot.Handle(telebot.OnText, func(c telebot.Context) error {
		message := c.Message()

		log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (ID: %d) –≤ —á–∞—Ç–µ %d (%s): %s",
			message.Sender.Username, message.Sender.ID,
			c.Chat().ID, c.Chat().Title, message.Text)

		bot.saveMessage(message)
		go bot.maybeDoRandomAction(c)

		if strings.Contains(message.Text, "@"+config.BotUsername) {
			log.Printf("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: %s", message.Text)

			if bot.isRoastMessage(message.Text) {
				log.Printf("–≠—Ç–æ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—è, –æ—Ç–≤–µ—á–∞–µ–º —É–º–Ω–∏–∫—É")
				return bot.handleRoast(c)
			}

			log.Printf("–≠—Ç–æ –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—é–º–µ")
			return bot.handleSummaryRequest(c)
		}

		return nil
	})

	tgBot.Handle("/debug", func(c telebot.Context) error {
		if !bot.isAdmin(c.Sender().ID) {
			return c.Reply("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
		}

		var count int64
		today := time.Now().Truncate(24 * time.Hour)
		tomorrow := today.Add(24 * time.Hour)

		bot.db.Model(&Message{}).
			Where("chat_id = ? AND timestamp >= ? AND timestamp < ?",
				c.Chat().ID, today, tomorrow).
			Count(&count)

		return c.Reply(fmt.Sprintf("üíæ –°–µ–≥–æ–¥–Ω—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %d\nüìã Chat ID: %d", count, c.Chat().ID))
	})

	go bot.startHealthServer()

	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! Username: @%s", config.BotUsername)
	tgBot.Start()
}
